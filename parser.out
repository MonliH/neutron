Grammar:

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> program statement
Rule 3     statement -> kword_declaration
Rule 4     statement -> variable_assignment
Rule 5     statement -> python_code_stmt
Rule 6     statement -> conditional
Rule 7     statement -> class_attribute_assignment
Rule 8     statement -> function_call_stmt
Rule 9     statement -> class_declaration
Rule 10    statement -> function_declaration
Rule 11    function_call_stmt -> function_call ;
Rule 12    python_code_stmt -> python_code ;
Rule 13    function_call -> expression ( empty )
Rule 14    function_call -> expression ( function_arguments )
Rule 15    function_declaration -> FUNC ID ( empty ) { program }
Rule 16    function_declaration -> FUNC ID ( function_arguments ) { program }
Rule 17    kword_declaration -> KWORD ID ( empty ) { program }
Rule 18    kword_declaration -> KWORD ID ( function_arguments ) { program }
Rule 19    function_arguments -> kwargs
Rule 20    function_arguments -> positional_args , kwargs  [precedence=left, level=1]
Rule 21    function_arguments -> positional_args
Rule 22    class_declaration -> CLASS ID { program }
Rule 23    positional_args -> expression
Rule 24    positional_args -> positional_args , expression  [precedence=left, level=1]
Rule 25    kwargs -> ID = expression
Rule 26    kwargs -> kwargs , id = expression
Rule 27    variable_assignment -> ID = expression ;
Rule 28    class_attribute_assignment -> class_attribute = expression ;
Rule 29    conditional -> if_statement else_statement
Rule 30    conditional -> if_statement else_if_loop else_statement
Rule 31    conditional -> if_statement else_if_loop
Rule 32    conditional -> if_statement
Rule 33    if_statement -> IF ( expression ) { program }
Rule 34    else_if_loop -> else_if_statement
Rule 35    else_if_loop -> else_if_loop else_if_statement
Rule 36    else_if_statement -> ELSE IF ( expression ) { program }
Rule 37    else_statement -> ELSE { program }
Rule 38    expression -> _numpy
Rule 39    expression -> _list
Rule 40    expression -> _tuple
Rule 41    expression -> class_attribute
Rule 42    expression -> id
Rule 43    expression -> string
Rule 44    expression -> bool
Rule 45    expression -> float
Rule 46    expression -> int
Rule 47    expression -> function_call
Rule 48    expression -> python_code
Rule 49    expression -> ( expression )
Rule 50    expression -> expression > expression  [precedence=left, level=5]
Rule 51    expression -> expression < expression  [precedence=left, level=5]
Rule 52    expression -> ! expression  [precedence=right, level=9]
Rule 53    expression -> expression & expression  [precedence=left, level=3]
Rule 54    expression -> expression | expression  [precedence=left, level=2]
Rule 55    expression -> expression EQ_GREATER expression  [precedence=left, level=5]
Rule 56    expression -> expression EQ_LESS expression  [precedence=left, level=5]
Rule 57    expression -> expression NOT_EQEQ expression  [precedence=left, level=4]
Rule 58    expression -> expression EQEQ expression  [precedence=left, level=4]
Rule 59    expression -> expression % expression  [precedence=left, level=7]
Rule 60    expression -> expression * expression  [precedence=left, level=7]
Rule 61    expression -> expression / expression  [precedence=left, level=7]
Rule 62    expression -> expression - expression  [precedence=left, level=6]
Rule 63    expression -> expression + expression  [precedence=left, level=6]
Rule 64    expression -> + expression  [precedence=right, level=8]
Rule 65    expression -> - expression  [precedence=right, level=8]
Rule 66    _tuple -> { positional_args }
Rule 67    _list -> [ positional_args ]
Rule 68    _numpy -> ( positional_args )
Rule 69    int -> INT
Rule 70    string -> STRING
Rule 71    float -> FLOAT
Rule 72    bool -> FALSE
Rule 73    bool -> TRUE
Rule 74    class_attribute -> expression COLON_COLON ID
Rule 75    id -> ID
Rule 76    python_code -> PYTHON_CODE
Rule 77    empty -> <empty>

Terminals, with rules where they appear:

!                    : 52
%                    : 59
&                    : 53
(                    : 13 14 15 16 17 18 33 36 49 68
)                    : 13 14 15 16 17 18 33 36 49 68
*                    : 60
+                    : 63 64
,                    : 20 24 26
-                    : 62 65
/                    : 61
;                    : 11 12 27 28
<                    : 51
=                    : 25 26 27 28
>                    : 50
CLASS                : 22
COLON_COLON          : 74
ELSE                 : 36 37
EQEQ                 : 58
EQ_GREATER           : 55
EQ_LESS              : 56
FALSE                : 72
FLOAT                : 71
FUNC                 : 15 16
ID                   : 15 16 17 18 22 25 27 74 75
IF                   : 33 36
INT                  : 69
KWORD                : 17 18
NOT_EQEQ             : 57
PYTHON_CODE          : 76
STRING               : 70
TRUE                 : 73
[                    : 67
]                    : 67
error                : 
{                    : 15 16 17 18 22 33 36 37 66
|                    : 54
}                    : 15 16 17 18 22 33 36 37 66

Nonterminals, with rules where they appear:

_list                : 39
_numpy               : 38
_tuple               : 40
bool                 : 44
class_attribute      : 28 41
class_attribute_assignment : 7
class_declaration    : 9
conditional          : 6
else_if_loop         : 30 31 35
else_if_statement    : 34 35
else_statement       : 29 30
empty                : 13 15 17
expression           : 13 14 23 24 25 26 27 28 33 36 49 50 50 51 51 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 65 74
float                : 45
function_arguments   : 14 16 18
function_call        : 11 47
function_call_stmt   : 8
function_declaration : 10
id                   : 26 42
if_statement         : 29 30 31 32
int                  : 46
kwargs               : 19 20 26
kword_declaration    : 3
positional_args      : 20 21 24 66 67 68
program              : 2 15 16 17 18 22 33 36 37 0
python_code          : 12 48
python_code_stmt     : 5
statement            : 1 2
string               : 43
variable_assignment  : 4


state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . program statement
    (3) statement -> . kword_declaration
    (4) statement -> . variable_assignment
    (5) statement -> . python_code_stmt
    (6) statement -> . conditional
    (7) statement -> . class_attribute_assignment
    (8) statement -> . function_call_stmt
    (9) statement -> . class_declaration
    (10) statement -> . function_declaration
    (17) kword_declaration -> . KWORD ID ( empty ) { program }
    (18) kword_declaration -> . KWORD ID ( function_arguments ) { program }
    (27) variable_assignment -> . ID = expression ;
    (12) python_code_stmt -> . python_code ;
    (29) conditional -> . if_statement else_statement
    (30) conditional -> . if_statement else_if_loop else_statement
    (31) conditional -> . if_statement else_if_loop
    (32) conditional -> . if_statement
    (28) class_attribute_assignment -> . class_attribute = expression ;
    (11) function_call_stmt -> . function_call ;
    (22) class_declaration -> . CLASS ID { program }
    (15) function_declaration -> . FUNC ID ( empty ) { program }
    (16) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (76) python_code -> . PYTHON_CODE
    (33) if_statement -> . IF ( expression ) { program }
    (74) class_attribute -> . expression COLON_COLON ID
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    KWORD           shift and go to state 11
    ID              shift and go to state 12
    CLASS           shift and go to state 20
    FUNC            shift and go to state 21
    PYTHON_CODE     shift and go to state 22
    IF              shift and go to state 23
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40

    program                        shift and go to state 1
    statement                      shift and go to state 2
    kword_declaration              shift and go to state 3
    variable_assignment            shift and go to state 4
    python_code_stmt               shift and go to state 5
    conditional                    shift and go to state 6
    class_attribute_assignment     shift and go to state 7
    function_call_stmt             shift and go to state 8
    class_declaration              shift and go to state 9
    function_declaration           shift and go to state 10
    expression                     shift and go to state 15
    python_code                    shift and go to state 16
    if_statement                   shift and go to state 17
    class_attribute                shift and go to state 18
    function_call                  shift and go to state 19
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31

state 1

    (0) S' -> program .
    (2) program -> program . statement
    (3) statement -> . kword_declaration
    (4) statement -> . variable_assignment
    (5) statement -> . python_code_stmt
    (6) statement -> . conditional
    (7) statement -> . class_attribute_assignment
    (8) statement -> . function_call_stmt
    (9) statement -> . class_declaration
    (10) statement -> . function_declaration
    (17) kword_declaration -> . KWORD ID ( empty ) { program }
    (18) kword_declaration -> . KWORD ID ( function_arguments ) { program }
    (27) variable_assignment -> . ID = expression ;
    (12) python_code_stmt -> . python_code ;
    (29) conditional -> . if_statement else_statement
    (30) conditional -> . if_statement else_if_loop else_statement
    (31) conditional -> . if_statement else_if_loop
    (32) conditional -> . if_statement
    (28) class_attribute_assignment -> . class_attribute = expression ;
    (11) function_call_stmt -> . function_call ;
    (22) class_declaration -> . CLASS ID { program }
    (15) function_declaration -> . FUNC ID ( empty ) { program }
    (16) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (76) python_code -> . PYTHON_CODE
    (33) if_statement -> . IF ( expression ) { program }
    (74) class_attribute -> . expression COLON_COLON ID
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    KWORD           shift and go to state 11
    ID              shift and go to state 12
    CLASS           shift and go to state 20
    FUNC            shift and go to state 21
    PYTHON_CODE     shift and go to state 22
    IF              shift and go to state 23
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40

    statement                      shift and go to state 41
    kword_declaration              shift and go to state 3
    variable_assignment            shift and go to state 4
    python_code_stmt               shift and go to state 5
    conditional                    shift and go to state 6
    class_attribute_assignment     shift and go to state 7
    function_call_stmt             shift and go to state 8
    class_declaration              shift and go to state 9
    function_declaration           shift and go to state 10
    expression                     shift and go to state 15
    python_code                    shift and go to state 16
    if_statement                   shift and go to state 17
    class_attribute                shift and go to state 18
    function_call                  shift and go to state 19
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31

state 2

    (1) program -> statement .
    KWORD           reduce using rule 1 (program -> statement .)
    ID              reduce using rule 1 (program -> statement .)
    CLASS           reduce using rule 1 (program -> statement .)
    FUNC            reduce using rule 1 (program -> statement .)
    PYTHON_CODE     reduce using rule 1 (program -> statement .)
    IF              reduce using rule 1 (program -> statement .)
    (               reduce using rule 1 (program -> statement .)
    !               reduce using rule 1 (program -> statement .)
    +               reduce using rule 1 (program -> statement .)
    -               reduce using rule 1 (program -> statement .)
    [               reduce using rule 1 (program -> statement .)
    {               reduce using rule 1 (program -> statement .)
    STRING          reduce using rule 1 (program -> statement .)
    FALSE           reduce using rule 1 (program -> statement .)
    TRUE            reduce using rule 1 (program -> statement .)
    FLOAT           reduce using rule 1 (program -> statement .)
    INT             reduce using rule 1 (program -> statement .)
    $end            reduce using rule 1 (program -> statement .)
    }               reduce using rule 1 (program -> statement .)


state 3

    (3) statement -> kword_declaration .
    KWORD           reduce using rule 3 (statement -> kword_declaration .)
    ID              reduce using rule 3 (statement -> kword_declaration .)
    CLASS           reduce using rule 3 (statement -> kword_declaration .)
    FUNC            reduce using rule 3 (statement -> kword_declaration .)
    PYTHON_CODE     reduce using rule 3 (statement -> kword_declaration .)
    IF              reduce using rule 3 (statement -> kword_declaration .)
    (               reduce using rule 3 (statement -> kword_declaration .)
    !               reduce using rule 3 (statement -> kword_declaration .)
    +               reduce using rule 3 (statement -> kword_declaration .)
    -               reduce using rule 3 (statement -> kword_declaration .)
    [               reduce using rule 3 (statement -> kword_declaration .)
    {               reduce using rule 3 (statement -> kword_declaration .)
    STRING          reduce using rule 3 (statement -> kword_declaration .)
    FALSE           reduce using rule 3 (statement -> kword_declaration .)
    TRUE            reduce using rule 3 (statement -> kword_declaration .)
    FLOAT           reduce using rule 3 (statement -> kword_declaration .)
    INT             reduce using rule 3 (statement -> kword_declaration .)
    $end            reduce using rule 3 (statement -> kword_declaration .)
    }               reduce using rule 3 (statement -> kword_declaration .)


state 4

    (4) statement -> variable_assignment .
    KWORD           reduce using rule 4 (statement -> variable_assignment .)
    ID              reduce using rule 4 (statement -> variable_assignment .)
    CLASS           reduce using rule 4 (statement -> variable_assignment .)
    FUNC            reduce using rule 4 (statement -> variable_assignment .)
    PYTHON_CODE     reduce using rule 4 (statement -> variable_assignment .)
    IF              reduce using rule 4 (statement -> variable_assignment .)
    (               reduce using rule 4 (statement -> variable_assignment .)
    !               reduce using rule 4 (statement -> variable_assignment .)
    +               reduce using rule 4 (statement -> variable_assignment .)
    -               reduce using rule 4 (statement -> variable_assignment .)
    [               reduce using rule 4 (statement -> variable_assignment .)
    {               reduce using rule 4 (statement -> variable_assignment .)
    STRING          reduce using rule 4 (statement -> variable_assignment .)
    FALSE           reduce using rule 4 (statement -> variable_assignment .)
    TRUE            reduce using rule 4 (statement -> variable_assignment .)
    FLOAT           reduce using rule 4 (statement -> variable_assignment .)
    INT             reduce using rule 4 (statement -> variable_assignment .)
    $end            reduce using rule 4 (statement -> variable_assignment .)
    }               reduce using rule 4 (statement -> variable_assignment .)


state 5

    (5) statement -> python_code_stmt .
    KWORD           reduce using rule 5 (statement -> python_code_stmt .)
    ID              reduce using rule 5 (statement -> python_code_stmt .)
    CLASS           reduce using rule 5 (statement -> python_code_stmt .)
    FUNC            reduce using rule 5 (statement -> python_code_stmt .)
    PYTHON_CODE     reduce using rule 5 (statement -> python_code_stmt .)
    IF              reduce using rule 5 (statement -> python_code_stmt .)
    (               reduce using rule 5 (statement -> python_code_stmt .)
    !               reduce using rule 5 (statement -> python_code_stmt .)
    +               reduce using rule 5 (statement -> python_code_stmt .)
    -               reduce using rule 5 (statement -> python_code_stmt .)
    [               reduce using rule 5 (statement -> python_code_stmt .)
    {               reduce using rule 5 (statement -> python_code_stmt .)
    STRING          reduce using rule 5 (statement -> python_code_stmt .)
    FALSE           reduce using rule 5 (statement -> python_code_stmt .)
    TRUE            reduce using rule 5 (statement -> python_code_stmt .)
    FLOAT           reduce using rule 5 (statement -> python_code_stmt .)
    INT             reduce using rule 5 (statement -> python_code_stmt .)
    $end            reduce using rule 5 (statement -> python_code_stmt .)
    }               reduce using rule 5 (statement -> python_code_stmt .)


state 6

    (6) statement -> conditional .
    KWORD           reduce using rule 6 (statement -> conditional .)
    ID              reduce using rule 6 (statement -> conditional .)
    CLASS           reduce using rule 6 (statement -> conditional .)
    FUNC            reduce using rule 6 (statement -> conditional .)
    PYTHON_CODE     reduce using rule 6 (statement -> conditional .)
    IF              reduce using rule 6 (statement -> conditional .)
    (               reduce using rule 6 (statement -> conditional .)
    !               reduce using rule 6 (statement -> conditional .)
    +               reduce using rule 6 (statement -> conditional .)
    -               reduce using rule 6 (statement -> conditional .)
    [               reduce using rule 6 (statement -> conditional .)
    {               reduce using rule 6 (statement -> conditional .)
    STRING          reduce using rule 6 (statement -> conditional .)
    FALSE           reduce using rule 6 (statement -> conditional .)
    TRUE            reduce using rule 6 (statement -> conditional .)
    FLOAT           reduce using rule 6 (statement -> conditional .)
    INT             reduce using rule 6 (statement -> conditional .)
    $end            reduce using rule 6 (statement -> conditional .)
    }               reduce using rule 6 (statement -> conditional .)


state 7

    (7) statement -> class_attribute_assignment .
    KWORD           reduce using rule 7 (statement -> class_attribute_assignment .)
    ID              reduce using rule 7 (statement -> class_attribute_assignment .)
    CLASS           reduce using rule 7 (statement -> class_attribute_assignment .)
    FUNC            reduce using rule 7 (statement -> class_attribute_assignment .)
    PYTHON_CODE     reduce using rule 7 (statement -> class_attribute_assignment .)
    IF              reduce using rule 7 (statement -> class_attribute_assignment .)
    (               reduce using rule 7 (statement -> class_attribute_assignment .)
    !               reduce using rule 7 (statement -> class_attribute_assignment .)
    +               reduce using rule 7 (statement -> class_attribute_assignment .)
    -               reduce using rule 7 (statement -> class_attribute_assignment .)
    [               reduce using rule 7 (statement -> class_attribute_assignment .)
    {               reduce using rule 7 (statement -> class_attribute_assignment .)
    STRING          reduce using rule 7 (statement -> class_attribute_assignment .)
    FALSE           reduce using rule 7 (statement -> class_attribute_assignment .)
    TRUE            reduce using rule 7 (statement -> class_attribute_assignment .)
    FLOAT           reduce using rule 7 (statement -> class_attribute_assignment .)
    INT             reduce using rule 7 (statement -> class_attribute_assignment .)
    $end            reduce using rule 7 (statement -> class_attribute_assignment .)
    }               reduce using rule 7 (statement -> class_attribute_assignment .)


state 8

    (8) statement -> function_call_stmt .
    KWORD           reduce using rule 8 (statement -> function_call_stmt .)
    ID              reduce using rule 8 (statement -> function_call_stmt .)
    CLASS           reduce using rule 8 (statement -> function_call_stmt .)
    FUNC            reduce using rule 8 (statement -> function_call_stmt .)
    PYTHON_CODE     reduce using rule 8 (statement -> function_call_stmt .)
    IF              reduce using rule 8 (statement -> function_call_stmt .)
    (               reduce using rule 8 (statement -> function_call_stmt .)
    !               reduce using rule 8 (statement -> function_call_stmt .)
    +               reduce using rule 8 (statement -> function_call_stmt .)
    -               reduce using rule 8 (statement -> function_call_stmt .)
    [               reduce using rule 8 (statement -> function_call_stmt .)
    {               reduce using rule 8 (statement -> function_call_stmt .)
    STRING          reduce using rule 8 (statement -> function_call_stmt .)
    FALSE           reduce using rule 8 (statement -> function_call_stmt .)
    TRUE            reduce using rule 8 (statement -> function_call_stmt .)
    FLOAT           reduce using rule 8 (statement -> function_call_stmt .)
    INT             reduce using rule 8 (statement -> function_call_stmt .)
    $end            reduce using rule 8 (statement -> function_call_stmt .)
    }               reduce using rule 8 (statement -> function_call_stmt .)


state 9

    (9) statement -> class_declaration .
    KWORD           reduce using rule 9 (statement -> class_declaration .)
    ID              reduce using rule 9 (statement -> class_declaration .)
    CLASS           reduce using rule 9 (statement -> class_declaration .)
    FUNC            reduce using rule 9 (statement -> class_declaration .)
    PYTHON_CODE     reduce using rule 9 (statement -> class_declaration .)
    IF              reduce using rule 9 (statement -> class_declaration .)
    (               reduce using rule 9 (statement -> class_declaration .)
    !               reduce using rule 9 (statement -> class_declaration .)
    +               reduce using rule 9 (statement -> class_declaration .)
    -               reduce using rule 9 (statement -> class_declaration .)
    [               reduce using rule 9 (statement -> class_declaration .)
    {               reduce using rule 9 (statement -> class_declaration .)
    STRING          reduce using rule 9 (statement -> class_declaration .)
    FALSE           reduce using rule 9 (statement -> class_declaration .)
    TRUE            reduce using rule 9 (statement -> class_declaration .)
    FLOAT           reduce using rule 9 (statement -> class_declaration .)
    INT             reduce using rule 9 (statement -> class_declaration .)
    $end            reduce using rule 9 (statement -> class_declaration .)
    }               reduce using rule 9 (statement -> class_declaration .)


state 10

    (10) statement -> function_declaration .
    KWORD           reduce using rule 10 (statement -> function_declaration .)
    ID              reduce using rule 10 (statement -> function_declaration .)
    CLASS           reduce using rule 10 (statement -> function_declaration .)
    FUNC            reduce using rule 10 (statement -> function_declaration .)
    PYTHON_CODE     reduce using rule 10 (statement -> function_declaration .)
    IF              reduce using rule 10 (statement -> function_declaration .)
    (               reduce using rule 10 (statement -> function_declaration .)
    !               reduce using rule 10 (statement -> function_declaration .)
    +               reduce using rule 10 (statement -> function_declaration .)
    -               reduce using rule 10 (statement -> function_declaration .)
    [               reduce using rule 10 (statement -> function_declaration .)
    {               reduce using rule 10 (statement -> function_declaration .)
    STRING          reduce using rule 10 (statement -> function_declaration .)
    FALSE           reduce using rule 10 (statement -> function_declaration .)
    TRUE            reduce using rule 10 (statement -> function_declaration .)
    FLOAT           reduce using rule 10 (statement -> function_declaration .)
    INT             reduce using rule 10 (statement -> function_declaration .)
    $end            reduce using rule 10 (statement -> function_declaration .)
    }               reduce using rule 10 (statement -> function_declaration .)


state 11

    (17) kword_declaration -> KWORD . ID ( empty ) { program }
    (18) kword_declaration -> KWORD . ID ( function_arguments ) { program }
    ID              shift and go to state 42


state 12

    (27) variable_assignment -> ID . = expression ;
    (75) id -> ID .
    =               shift and go to state 43
    COLON_COLON     reduce using rule 75 (id -> ID .)
    (               reduce using rule 75 (id -> ID .)
    >               reduce using rule 75 (id -> ID .)
    <               reduce using rule 75 (id -> ID .)
    &               reduce using rule 75 (id -> ID .)
    |               reduce using rule 75 (id -> ID .)
    EQ_GREATER      reduce using rule 75 (id -> ID .)
    EQ_LESS         reduce using rule 75 (id -> ID .)
    NOT_EQEQ        reduce using rule 75 (id -> ID .)
    EQEQ            reduce using rule 75 (id -> ID .)
    %               reduce using rule 75 (id -> ID .)
    *               reduce using rule 75 (id -> ID .)
    /               reduce using rule 75 (id -> ID .)
    -               reduce using rule 75 (id -> ID .)
    +               reduce using rule 75 (id -> ID .)


state 13

    (49) expression -> ( . expression )
    (68) _numpy -> ( . positional_args )
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (23) positional_args -> . expression
    (24) positional_args -> . positional_args , expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 44
    positional_args                shift and go to state 45
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 14

    (66) _tuple -> { . positional_args }
    (23) positional_args -> . expression
    (24) positional_args -> . positional_args , expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    positional_args                shift and go to state 50
    expression                     shift and go to state 51
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 15

    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    COLON_COLON     shift and go to state 52
    (               shift and go to state 53
    >               shift and go to state 54
    <               shift and go to state 55
    &               shift and go to state 56
    |               shift and go to state 57
    EQ_GREATER      shift and go to state 58
    EQ_LESS         shift and go to state 59
    NOT_EQEQ        shift and go to state 60
    EQEQ            shift and go to state 61
    %               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    -               shift and go to state 65
    +               shift and go to state 66


state 16

    (12) python_code_stmt -> python_code . ;
    (48) expression -> python_code .
    ;               shift and go to state 67
    COLON_COLON     reduce using rule 48 (expression -> python_code .)
    (               reduce using rule 48 (expression -> python_code .)
    >               reduce using rule 48 (expression -> python_code .)
    <               reduce using rule 48 (expression -> python_code .)
    &               reduce using rule 48 (expression -> python_code .)
    |               reduce using rule 48 (expression -> python_code .)
    EQ_GREATER      reduce using rule 48 (expression -> python_code .)
    EQ_LESS         reduce using rule 48 (expression -> python_code .)
    NOT_EQEQ        reduce using rule 48 (expression -> python_code .)
    EQEQ            reduce using rule 48 (expression -> python_code .)
    %               reduce using rule 48 (expression -> python_code .)
    *               reduce using rule 48 (expression -> python_code .)
    /               reduce using rule 48 (expression -> python_code .)
    -               reduce using rule 48 (expression -> python_code .)
    +               reduce using rule 48 (expression -> python_code .)


state 17

    (29) conditional -> if_statement . else_statement
    (30) conditional -> if_statement . else_if_loop else_statement
    (31) conditional -> if_statement . else_if_loop
    (32) conditional -> if_statement .
    (37) else_statement -> . ELSE { program }
    (34) else_if_loop -> . else_if_statement
    (35) else_if_loop -> . else_if_loop else_if_statement
    (36) else_if_statement -> . ELSE IF ( expression ) { program }
    KWORD           reduce using rule 32 (conditional -> if_statement .)
    ID              reduce using rule 32 (conditional -> if_statement .)
    CLASS           reduce using rule 32 (conditional -> if_statement .)
    FUNC            reduce using rule 32 (conditional -> if_statement .)
    PYTHON_CODE     reduce using rule 32 (conditional -> if_statement .)
    IF              reduce using rule 32 (conditional -> if_statement .)
    (               reduce using rule 32 (conditional -> if_statement .)
    !               reduce using rule 32 (conditional -> if_statement .)
    +               reduce using rule 32 (conditional -> if_statement .)
    -               reduce using rule 32 (conditional -> if_statement .)
    [               reduce using rule 32 (conditional -> if_statement .)
    {               reduce using rule 32 (conditional -> if_statement .)
    STRING          reduce using rule 32 (conditional -> if_statement .)
    FALSE           reduce using rule 32 (conditional -> if_statement .)
    TRUE            reduce using rule 32 (conditional -> if_statement .)
    FLOAT           reduce using rule 32 (conditional -> if_statement .)
    INT             reduce using rule 32 (conditional -> if_statement .)
    $end            reduce using rule 32 (conditional -> if_statement .)
    }               reduce using rule 32 (conditional -> if_statement .)
    ELSE            shift and go to state 70

    else_statement                 shift and go to state 68
    else_if_loop                   shift and go to state 69
    else_if_statement              shift and go to state 71

state 18

    (28) class_attribute_assignment -> class_attribute . = expression ;
    (41) expression -> class_attribute .
    =               shift and go to state 72
    COLON_COLON     reduce using rule 41 (expression -> class_attribute .)
    (               reduce using rule 41 (expression -> class_attribute .)
    >               reduce using rule 41 (expression -> class_attribute .)
    <               reduce using rule 41 (expression -> class_attribute .)
    &               reduce using rule 41 (expression -> class_attribute .)
    |               reduce using rule 41 (expression -> class_attribute .)
    EQ_GREATER      reduce using rule 41 (expression -> class_attribute .)
    EQ_LESS         reduce using rule 41 (expression -> class_attribute .)
    NOT_EQEQ        reduce using rule 41 (expression -> class_attribute .)
    EQEQ            reduce using rule 41 (expression -> class_attribute .)
    %               reduce using rule 41 (expression -> class_attribute .)
    *               reduce using rule 41 (expression -> class_attribute .)
    /               reduce using rule 41 (expression -> class_attribute .)
    -               reduce using rule 41 (expression -> class_attribute .)
    +               reduce using rule 41 (expression -> class_attribute .)


state 19

    (11) function_call_stmt -> function_call . ;
    (47) expression -> function_call .
    ;               shift and go to state 73
    COLON_COLON     reduce using rule 47 (expression -> function_call .)
    (               reduce using rule 47 (expression -> function_call .)
    >               reduce using rule 47 (expression -> function_call .)
    <               reduce using rule 47 (expression -> function_call .)
    &               reduce using rule 47 (expression -> function_call .)
    |               reduce using rule 47 (expression -> function_call .)
    EQ_GREATER      reduce using rule 47 (expression -> function_call .)
    EQ_LESS         reduce using rule 47 (expression -> function_call .)
    NOT_EQEQ        reduce using rule 47 (expression -> function_call .)
    EQEQ            reduce using rule 47 (expression -> function_call .)
    %               reduce using rule 47 (expression -> function_call .)
    *               reduce using rule 47 (expression -> function_call .)
    /               reduce using rule 47 (expression -> function_call .)
    -               reduce using rule 47 (expression -> function_call .)
    +               reduce using rule 47 (expression -> function_call .)


state 20

    (22) class_declaration -> CLASS . ID { program }
    ID              shift and go to state 74


state 21

    (15) function_declaration -> FUNC . ID ( empty ) { program }
    (16) function_declaration -> FUNC . ID ( function_arguments ) { program }
    ID              shift and go to state 75


state 22

    (76) python_code -> PYTHON_CODE .
    ;               reduce using rule 76 (python_code -> PYTHON_CODE .)
    COLON_COLON     reduce using rule 76 (python_code -> PYTHON_CODE .)
    (               reduce using rule 76 (python_code -> PYTHON_CODE .)
    >               reduce using rule 76 (python_code -> PYTHON_CODE .)
    <               reduce using rule 76 (python_code -> PYTHON_CODE .)
    &               reduce using rule 76 (python_code -> PYTHON_CODE .)
    |               reduce using rule 76 (python_code -> PYTHON_CODE .)
    EQ_GREATER      reduce using rule 76 (python_code -> PYTHON_CODE .)
    EQ_LESS         reduce using rule 76 (python_code -> PYTHON_CODE .)
    NOT_EQEQ        reduce using rule 76 (python_code -> PYTHON_CODE .)
    EQEQ            reduce using rule 76 (python_code -> PYTHON_CODE .)
    %               reduce using rule 76 (python_code -> PYTHON_CODE .)
    *               reduce using rule 76 (python_code -> PYTHON_CODE .)
    /               reduce using rule 76 (python_code -> PYTHON_CODE .)
    -               reduce using rule 76 (python_code -> PYTHON_CODE .)
    +               reduce using rule 76 (python_code -> PYTHON_CODE .)
    )               reduce using rule 76 (python_code -> PYTHON_CODE .)
    ,               reduce using rule 76 (python_code -> PYTHON_CODE .)
    }               reduce using rule 76 (python_code -> PYTHON_CODE .)
    ]               reduce using rule 76 (python_code -> PYTHON_CODE .)


state 23

    (33) if_statement -> IF . ( expression ) { program }
    (               shift and go to state 76


state 24

    (38) expression -> _numpy .
    COLON_COLON     reduce using rule 38 (expression -> _numpy .)
    (               reduce using rule 38 (expression -> _numpy .)
    >               reduce using rule 38 (expression -> _numpy .)
    <               reduce using rule 38 (expression -> _numpy .)
    &               reduce using rule 38 (expression -> _numpy .)
    |               reduce using rule 38 (expression -> _numpy .)
    EQ_GREATER      reduce using rule 38 (expression -> _numpy .)
    EQ_LESS         reduce using rule 38 (expression -> _numpy .)
    NOT_EQEQ        reduce using rule 38 (expression -> _numpy .)
    EQEQ            reduce using rule 38 (expression -> _numpy .)
    %               reduce using rule 38 (expression -> _numpy .)
    *               reduce using rule 38 (expression -> _numpy .)
    /               reduce using rule 38 (expression -> _numpy .)
    -               reduce using rule 38 (expression -> _numpy .)
    +               reduce using rule 38 (expression -> _numpy .)
    )               reduce using rule 38 (expression -> _numpy .)
    ,               reduce using rule 38 (expression -> _numpy .)
    }               reduce using rule 38 (expression -> _numpy .)
    ]               reduce using rule 38 (expression -> _numpy .)
    ;               reduce using rule 38 (expression -> _numpy .)


state 25

    (39) expression -> _list .
    COLON_COLON     reduce using rule 39 (expression -> _list .)
    (               reduce using rule 39 (expression -> _list .)
    >               reduce using rule 39 (expression -> _list .)
    <               reduce using rule 39 (expression -> _list .)
    &               reduce using rule 39 (expression -> _list .)
    |               reduce using rule 39 (expression -> _list .)
    EQ_GREATER      reduce using rule 39 (expression -> _list .)
    EQ_LESS         reduce using rule 39 (expression -> _list .)
    NOT_EQEQ        reduce using rule 39 (expression -> _list .)
    EQEQ            reduce using rule 39 (expression -> _list .)
    %               reduce using rule 39 (expression -> _list .)
    *               reduce using rule 39 (expression -> _list .)
    /               reduce using rule 39 (expression -> _list .)
    -               reduce using rule 39 (expression -> _list .)
    +               reduce using rule 39 (expression -> _list .)
    )               reduce using rule 39 (expression -> _list .)
    ,               reduce using rule 39 (expression -> _list .)
    }               reduce using rule 39 (expression -> _list .)
    ]               reduce using rule 39 (expression -> _list .)
    ;               reduce using rule 39 (expression -> _list .)


state 26

    (40) expression -> _tuple .
    COLON_COLON     reduce using rule 40 (expression -> _tuple .)
    (               reduce using rule 40 (expression -> _tuple .)
    >               reduce using rule 40 (expression -> _tuple .)
    <               reduce using rule 40 (expression -> _tuple .)
    &               reduce using rule 40 (expression -> _tuple .)
    |               reduce using rule 40 (expression -> _tuple .)
    EQ_GREATER      reduce using rule 40 (expression -> _tuple .)
    EQ_LESS         reduce using rule 40 (expression -> _tuple .)
    NOT_EQEQ        reduce using rule 40 (expression -> _tuple .)
    EQEQ            reduce using rule 40 (expression -> _tuple .)
    %               reduce using rule 40 (expression -> _tuple .)
    *               reduce using rule 40 (expression -> _tuple .)
    /               reduce using rule 40 (expression -> _tuple .)
    -               reduce using rule 40 (expression -> _tuple .)
    +               reduce using rule 40 (expression -> _tuple .)
    )               reduce using rule 40 (expression -> _tuple .)
    ,               reduce using rule 40 (expression -> _tuple .)
    }               reduce using rule 40 (expression -> _tuple .)
    ]               reduce using rule 40 (expression -> _tuple .)
    ;               reduce using rule 40 (expression -> _tuple .)


state 27

    (42) expression -> id .
    COLON_COLON     reduce using rule 42 (expression -> id .)
    (               reduce using rule 42 (expression -> id .)
    >               reduce using rule 42 (expression -> id .)
    <               reduce using rule 42 (expression -> id .)
    &               reduce using rule 42 (expression -> id .)
    |               reduce using rule 42 (expression -> id .)
    EQ_GREATER      reduce using rule 42 (expression -> id .)
    EQ_LESS         reduce using rule 42 (expression -> id .)
    NOT_EQEQ        reduce using rule 42 (expression -> id .)
    EQEQ            reduce using rule 42 (expression -> id .)
    %               reduce using rule 42 (expression -> id .)
    *               reduce using rule 42 (expression -> id .)
    /               reduce using rule 42 (expression -> id .)
    -               reduce using rule 42 (expression -> id .)
    +               reduce using rule 42 (expression -> id .)
    )               reduce using rule 42 (expression -> id .)
    ,               reduce using rule 42 (expression -> id .)
    }               reduce using rule 42 (expression -> id .)
    ]               reduce using rule 42 (expression -> id .)
    ;               reduce using rule 42 (expression -> id .)


state 28

    (43) expression -> string .
    COLON_COLON     reduce using rule 43 (expression -> string .)
    (               reduce using rule 43 (expression -> string .)
    >               reduce using rule 43 (expression -> string .)
    <               reduce using rule 43 (expression -> string .)
    &               reduce using rule 43 (expression -> string .)
    |               reduce using rule 43 (expression -> string .)
    EQ_GREATER      reduce using rule 43 (expression -> string .)
    EQ_LESS         reduce using rule 43 (expression -> string .)
    NOT_EQEQ        reduce using rule 43 (expression -> string .)
    EQEQ            reduce using rule 43 (expression -> string .)
    %               reduce using rule 43 (expression -> string .)
    *               reduce using rule 43 (expression -> string .)
    /               reduce using rule 43 (expression -> string .)
    -               reduce using rule 43 (expression -> string .)
    +               reduce using rule 43 (expression -> string .)
    )               reduce using rule 43 (expression -> string .)
    ,               reduce using rule 43 (expression -> string .)
    }               reduce using rule 43 (expression -> string .)
    ]               reduce using rule 43 (expression -> string .)
    ;               reduce using rule 43 (expression -> string .)


state 29

    (44) expression -> bool .
    COLON_COLON     reduce using rule 44 (expression -> bool .)
    (               reduce using rule 44 (expression -> bool .)
    >               reduce using rule 44 (expression -> bool .)
    <               reduce using rule 44 (expression -> bool .)
    &               reduce using rule 44 (expression -> bool .)
    |               reduce using rule 44 (expression -> bool .)
    EQ_GREATER      reduce using rule 44 (expression -> bool .)
    EQ_LESS         reduce using rule 44 (expression -> bool .)
    NOT_EQEQ        reduce using rule 44 (expression -> bool .)
    EQEQ            reduce using rule 44 (expression -> bool .)
    %               reduce using rule 44 (expression -> bool .)
    *               reduce using rule 44 (expression -> bool .)
    /               reduce using rule 44 (expression -> bool .)
    -               reduce using rule 44 (expression -> bool .)
    +               reduce using rule 44 (expression -> bool .)
    )               reduce using rule 44 (expression -> bool .)
    ,               reduce using rule 44 (expression -> bool .)
    }               reduce using rule 44 (expression -> bool .)
    ]               reduce using rule 44 (expression -> bool .)
    ;               reduce using rule 44 (expression -> bool .)


state 30

    (45) expression -> float .
    COLON_COLON     reduce using rule 45 (expression -> float .)
    (               reduce using rule 45 (expression -> float .)
    >               reduce using rule 45 (expression -> float .)
    <               reduce using rule 45 (expression -> float .)
    &               reduce using rule 45 (expression -> float .)
    |               reduce using rule 45 (expression -> float .)
    EQ_GREATER      reduce using rule 45 (expression -> float .)
    EQ_LESS         reduce using rule 45 (expression -> float .)
    NOT_EQEQ        reduce using rule 45 (expression -> float .)
    EQEQ            reduce using rule 45 (expression -> float .)
    %               reduce using rule 45 (expression -> float .)
    *               reduce using rule 45 (expression -> float .)
    /               reduce using rule 45 (expression -> float .)
    -               reduce using rule 45 (expression -> float .)
    +               reduce using rule 45 (expression -> float .)
    )               reduce using rule 45 (expression -> float .)
    ,               reduce using rule 45 (expression -> float .)
    }               reduce using rule 45 (expression -> float .)
    ]               reduce using rule 45 (expression -> float .)
    ;               reduce using rule 45 (expression -> float .)


state 31

    (46) expression -> int .
    COLON_COLON     reduce using rule 46 (expression -> int .)
    (               reduce using rule 46 (expression -> int .)
    >               reduce using rule 46 (expression -> int .)
    <               reduce using rule 46 (expression -> int .)
    &               reduce using rule 46 (expression -> int .)
    |               reduce using rule 46 (expression -> int .)
    EQ_GREATER      reduce using rule 46 (expression -> int .)
    EQ_LESS         reduce using rule 46 (expression -> int .)
    NOT_EQEQ        reduce using rule 46 (expression -> int .)
    EQEQ            reduce using rule 46 (expression -> int .)
    %               reduce using rule 46 (expression -> int .)
    *               reduce using rule 46 (expression -> int .)
    /               reduce using rule 46 (expression -> int .)
    -               reduce using rule 46 (expression -> int .)
    +               reduce using rule 46 (expression -> int .)
    )               reduce using rule 46 (expression -> int .)
    ,               reduce using rule 46 (expression -> int .)
    }               reduce using rule 46 (expression -> int .)
    ]               reduce using rule 46 (expression -> int .)
    ;               reduce using rule 46 (expression -> int .)


state 32

    (52) expression -> ! . expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 77
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 33

    (65) expression -> - . expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 78
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 34

    (64) expression -> + . expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 79
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 35

    (67) _list -> [ . positional_args ]
    (23) positional_args -> . expression
    (24) positional_args -> . positional_args , expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    positional_args                shift and go to state 80
    expression                     shift and go to state 51
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 36

    (70) string -> STRING .
    COLON_COLON     reduce using rule 70 (string -> STRING .)
    (               reduce using rule 70 (string -> STRING .)
    >               reduce using rule 70 (string -> STRING .)
    <               reduce using rule 70 (string -> STRING .)
    &               reduce using rule 70 (string -> STRING .)
    |               reduce using rule 70 (string -> STRING .)
    EQ_GREATER      reduce using rule 70 (string -> STRING .)
    EQ_LESS         reduce using rule 70 (string -> STRING .)
    NOT_EQEQ        reduce using rule 70 (string -> STRING .)
    EQEQ            reduce using rule 70 (string -> STRING .)
    %               reduce using rule 70 (string -> STRING .)
    *               reduce using rule 70 (string -> STRING .)
    /               reduce using rule 70 (string -> STRING .)
    -               reduce using rule 70 (string -> STRING .)
    +               reduce using rule 70 (string -> STRING .)
    )               reduce using rule 70 (string -> STRING .)
    ,               reduce using rule 70 (string -> STRING .)
    }               reduce using rule 70 (string -> STRING .)
    ]               reduce using rule 70 (string -> STRING .)
    ;               reduce using rule 70 (string -> STRING .)


state 37

    (72) bool -> FALSE .
    COLON_COLON     reduce using rule 72 (bool -> FALSE .)
    (               reduce using rule 72 (bool -> FALSE .)
    >               reduce using rule 72 (bool -> FALSE .)
    <               reduce using rule 72 (bool -> FALSE .)
    &               reduce using rule 72 (bool -> FALSE .)
    |               reduce using rule 72 (bool -> FALSE .)
    EQ_GREATER      reduce using rule 72 (bool -> FALSE .)
    EQ_LESS         reduce using rule 72 (bool -> FALSE .)
    NOT_EQEQ        reduce using rule 72 (bool -> FALSE .)
    EQEQ            reduce using rule 72 (bool -> FALSE .)
    %               reduce using rule 72 (bool -> FALSE .)
    *               reduce using rule 72 (bool -> FALSE .)
    /               reduce using rule 72 (bool -> FALSE .)
    -               reduce using rule 72 (bool -> FALSE .)
    +               reduce using rule 72 (bool -> FALSE .)
    )               reduce using rule 72 (bool -> FALSE .)
    ,               reduce using rule 72 (bool -> FALSE .)
    }               reduce using rule 72 (bool -> FALSE .)
    ]               reduce using rule 72 (bool -> FALSE .)
    ;               reduce using rule 72 (bool -> FALSE .)


state 38

    (73) bool -> TRUE .
    COLON_COLON     reduce using rule 73 (bool -> TRUE .)
    (               reduce using rule 73 (bool -> TRUE .)
    >               reduce using rule 73 (bool -> TRUE .)
    <               reduce using rule 73 (bool -> TRUE .)
    &               reduce using rule 73 (bool -> TRUE .)
    |               reduce using rule 73 (bool -> TRUE .)
    EQ_GREATER      reduce using rule 73 (bool -> TRUE .)
    EQ_LESS         reduce using rule 73 (bool -> TRUE .)
    NOT_EQEQ        reduce using rule 73 (bool -> TRUE .)
    EQEQ            reduce using rule 73 (bool -> TRUE .)
    %               reduce using rule 73 (bool -> TRUE .)
    *               reduce using rule 73 (bool -> TRUE .)
    /               reduce using rule 73 (bool -> TRUE .)
    -               reduce using rule 73 (bool -> TRUE .)
    +               reduce using rule 73 (bool -> TRUE .)
    )               reduce using rule 73 (bool -> TRUE .)
    ,               reduce using rule 73 (bool -> TRUE .)
    }               reduce using rule 73 (bool -> TRUE .)
    ]               reduce using rule 73 (bool -> TRUE .)
    ;               reduce using rule 73 (bool -> TRUE .)


state 39

    (71) float -> FLOAT .
    COLON_COLON     reduce using rule 71 (float -> FLOAT .)
    (               reduce using rule 71 (float -> FLOAT .)
    >               reduce using rule 71 (float -> FLOAT .)
    <               reduce using rule 71 (float -> FLOAT .)
    &               reduce using rule 71 (float -> FLOAT .)
    |               reduce using rule 71 (float -> FLOAT .)
    EQ_GREATER      reduce using rule 71 (float -> FLOAT .)
    EQ_LESS         reduce using rule 71 (float -> FLOAT .)
    NOT_EQEQ        reduce using rule 71 (float -> FLOAT .)
    EQEQ            reduce using rule 71 (float -> FLOAT .)
    %               reduce using rule 71 (float -> FLOAT .)
    *               reduce using rule 71 (float -> FLOAT .)
    /               reduce using rule 71 (float -> FLOAT .)
    -               reduce using rule 71 (float -> FLOAT .)
    +               reduce using rule 71 (float -> FLOAT .)
    )               reduce using rule 71 (float -> FLOAT .)
    ,               reduce using rule 71 (float -> FLOAT .)
    }               reduce using rule 71 (float -> FLOAT .)
    ]               reduce using rule 71 (float -> FLOAT .)
    ;               reduce using rule 71 (float -> FLOAT .)


state 40

    (69) int -> INT .
    COLON_COLON     reduce using rule 69 (int -> INT .)
    (               reduce using rule 69 (int -> INT .)
    >               reduce using rule 69 (int -> INT .)
    <               reduce using rule 69 (int -> INT .)
    &               reduce using rule 69 (int -> INT .)
    |               reduce using rule 69 (int -> INT .)
    EQ_GREATER      reduce using rule 69 (int -> INT .)
    EQ_LESS         reduce using rule 69 (int -> INT .)
    NOT_EQEQ        reduce using rule 69 (int -> INT .)
    EQEQ            reduce using rule 69 (int -> INT .)
    %               reduce using rule 69 (int -> INT .)
    *               reduce using rule 69 (int -> INT .)
    /               reduce using rule 69 (int -> INT .)
    -               reduce using rule 69 (int -> INT .)
    +               reduce using rule 69 (int -> INT .)
    )               reduce using rule 69 (int -> INT .)
    ,               reduce using rule 69 (int -> INT .)
    }               reduce using rule 69 (int -> INT .)
    ]               reduce using rule 69 (int -> INT .)
    ;               reduce using rule 69 (int -> INT .)


state 41

    (2) program -> program statement .
    KWORD           reduce using rule 2 (program -> program statement .)
    ID              reduce using rule 2 (program -> program statement .)
    CLASS           reduce using rule 2 (program -> program statement .)
    FUNC            reduce using rule 2 (program -> program statement .)
    PYTHON_CODE     reduce using rule 2 (program -> program statement .)
    IF              reduce using rule 2 (program -> program statement .)
    (               reduce using rule 2 (program -> program statement .)
    !               reduce using rule 2 (program -> program statement .)
    +               reduce using rule 2 (program -> program statement .)
    -               reduce using rule 2 (program -> program statement .)
    [               reduce using rule 2 (program -> program statement .)
    {               reduce using rule 2 (program -> program statement .)
    STRING          reduce using rule 2 (program -> program statement .)
    FALSE           reduce using rule 2 (program -> program statement .)
    TRUE            reduce using rule 2 (program -> program statement .)
    FLOAT           reduce using rule 2 (program -> program statement .)
    INT             reduce using rule 2 (program -> program statement .)
    $end            reduce using rule 2 (program -> program statement .)
    }               reduce using rule 2 (program -> program statement .)


state 42

    (17) kword_declaration -> KWORD ID . ( empty ) { program }
    (18) kword_declaration -> KWORD ID . ( function_arguments ) { program }
    (               shift and go to state 81


state 43

    (27) variable_assignment -> ID = . expression ;
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 82
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 44

    (49) expression -> ( expression . )
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (23) positional_args -> expression .
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 83
    >               shift and go to state 54
    <               shift and go to state 55
    &               shift and go to state 56
    |               shift and go to state 57
    EQ_GREATER      shift and go to state 58
    EQ_LESS         shift and go to state 59
    NOT_EQEQ        shift and go to state 60
    EQEQ            shift and go to state 61
    %               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    -               shift and go to state 65
    +               shift and go to state 66
    ,               reduce using rule 23 (positional_args -> expression .)
    COLON_COLON     shift and go to state 52
    (               shift and go to state 53


state 45

    (68) _numpy -> ( positional_args . )
    (24) positional_args -> positional_args . , expression
    )               shift and go to state 84
    ,               shift and go to state 85


state 46

    (41) expression -> class_attribute .
    )               reduce using rule 41 (expression -> class_attribute .)
    >               reduce using rule 41 (expression -> class_attribute .)
    <               reduce using rule 41 (expression -> class_attribute .)
    &               reduce using rule 41 (expression -> class_attribute .)
    |               reduce using rule 41 (expression -> class_attribute .)
    EQ_GREATER      reduce using rule 41 (expression -> class_attribute .)
    EQ_LESS         reduce using rule 41 (expression -> class_attribute .)
    NOT_EQEQ        reduce using rule 41 (expression -> class_attribute .)
    EQEQ            reduce using rule 41 (expression -> class_attribute .)
    %               reduce using rule 41 (expression -> class_attribute .)
    *               reduce using rule 41 (expression -> class_attribute .)
    /               reduce using rule 41 (expression -> class_attribute .)
    -               reduce using rule 41 (expression -> class_attribute .)
    +               reduce using rule 41 (expression -> class_attribute .)
    COLON_COLON     reduce using rule 41 (expression -> class_attribute .)
    (               reduce using rule 41 (expression -> class_attribute .)
    ,               reduce using rule 41 (expression -> class_attribute .)
    }               reduce using rule 41 (expression -> class_attribute .)
    ]               reduce using rule 41 (expression -> class_attribute .)
    ;               reduce using rule 41 (expression -> class_attribute .)


state 47

    (47) expression -> function_call .
    )               reduce using rule 47 (expression -> function_call .)
    >               reduce using rule 47 (expression -> function_call .)
    <               reduce using rule 47 (expression -> function_call .)
    &               reduce using rule 47 (expression -> function_call .)
    |               reduce using rule 47 (expression -> function_call .)
    EQ_GREATER      reduce using rule 47 (expression -> function_call .)
    EQ_LESS         reduce using rule 47 (expression -> function_call .)
    NOT_EQEQ        reduce using rule 47 (expression -> function_call .)
    EQEQ            reduce using rule 47 (expression -> function_call .)
    %               reduce using rule 47 (expression -> function_call .)
    *               reduce using rule 47 (expression -> function_call .)
    /               reduce using rule 47 (expression -> function_call .)
    -               reduce using rule 47 (expression -> function_call .)
    +               reduce using rule 47 (expression -> function_call .)
    COLON_COLON     reduce using rule 47 (expression -> function_call .)
    (               reduce using rule 47 (expression -> function_call .)
    ,               reduce using rule 47 (expression -> function_call .)
    }               reduce using rule 47 (expression -> function_call .)
    ]               reduce using rule 47 (expression -> function_call .)
    ;               reduce using rule 47 (expression -> function_call .)


state 48

    (48) expression -> python_code .
    )               reduce using rule 48 (expression -> python_code .)
    >               reduce using rule 48 (expression -> python_code .)
    <               reduce using rule 48 (expression -> python_code .)
    &               reduce using rule 48 (expression -> python_code .)
    |               reduce using rule 48 (expression -> python_code .)
    EQ_GREATER      reduce using rule 48 (expression -> python_code .)
    EQ_LESS         reduce using rule 48 (expression -> python_code .)
    NOT_EQEQ        reduce using rule 48 (expression -> python_code .)
    EQEQ            reduce using rule 48 (expression -> python_code .)
    %               reduce using rule 48 (expression -> python_code .)
    *               reduce using rule 48 (expression -> python_code .)
    /               reduce using rule 48 (expression -> python_code .)
    -               reduce using rule 48 (expression -> python_code .)
    +               reduce using rule 48 (expression -> python_code .)
    COLON_COLON     reduce using rule 48 (expression -> python_code .)
    (               reduce using rule 48 (expression -> python_code .)
    ,               reduce using rule 48 (expression -> python_code .)
    }               reduce using rule 48 (expression -> python_code .)
    ]               reduce using rule 48 (expression -> python_code .)
    ;               reduce using rule 48 (expression -> python_code .)


state 49

    (75) id -> ID .
    )               reduce using rule 75 (id -> ID .)
    >               reduce using rule 75 (id -> ID .)
    <               reduce using rule 75 (id -> ID .)
    &               reduce using rule 75 (id -> ID .)
    |               reduce using rule 75 (id -> ID .)
    EQ_GREATER      reduce using rule 75 (id -> ID .)
    EQ_LESS         reduce using rule 75 (id -> ID .)
    NOT_EQEQ        reduce using rule 75 (id -> ID .)
    EQEQ            reduce using rule 75 (id -> ID .)
    %               reduce using rule 75 (id -> ID .)
    *               reduce using rule 75 (id -> ID .)
    /               reduce using rule 75 (id -> ID .)
    -               reduce using rule 75 (id -> ID .)
    +               reduce using rule 75 (id -> ID .)
    COLON_COLON     reduce using rule 75 (id -> ID .)
    (               reduce using rule 75 (id -> ID .)
    ,               reduce using rule 75 (id -> ID .)
    }               reduce using rule 75 (id -> ID .)
    ]               reduce using rule 75 (id -> ID .)
    ;               reduce using rule 75 (id -> ID .)
    =               reduce using rule 75 (id -> ID .)


state 50

    (66) _tuple -> { positional_args . }
    (24) positional_args -> positional_args . , expression
    }               shift and go to state 86
    ,               shift and go to state 85


state 51

    (23) positional_args -> expression .
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    }               reduce using rule 23 (positional_args -> expression .)
    ,               reduce using rule 23 (positional_args -> expression .)
    ]               reduce using rule 23 (positional_args -> expression .)
    )               reduce using rule 23 (positional_args -> expression .)
    >               shift and go to state 54
    <               shift and go to state 55
    &               shift and go to state 56
    |               shift and go to state 57
    EQ_GREATER      shift and go to state 58
    EQ_LESS         shift and go to state 59
    NOT_EQEQ        shift and go to state 60
    EQEQ            shift and go to state 61
    %               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    -               shift and go to state 65
    +               shift and go to state 66
    COLON_COLON     shift and go to state 52
    (               shift and go to state 53


state 52

    (74) class_attribute -> expression COLON_COLON . ID
    ID              shift and go to state 87


state 53

    (13) function_call -> expression ( . empty )
    (14) function_call -> expression ( . function_arguments )
    (77) empty -> .
    (19) function_arguments -> . kwargs
    (20) function_arguments -> . positional_args , kwargs
    (21) function_arguments -> . positional_args
    (25) kwargs -> . ID = expression
    (26) kwargs -> . kwargs , id = expression
    (23) positional_args -> . expression
    (24) positional_args -> . positional_args , expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    )               reduce using rule 77 (empty -> .)
    ID              shift and go to state 92
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 51
    empty                          shift and go to state 88
    function_arguments             shift and go to state 89
    kwargs                         shift and go to state 90
    positional_args                shift and go to state 91
    id                             shift and go to state 27
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 54

    (50) expression -> expression > . expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 93
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 55

    (51) expression -> expression < . expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 94
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 56

    (53) expression -> expression & . expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 95
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 57

    (54) expression -> expression | . expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 96
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 58

    (55) expression -> expression EQ_GREATER . expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 97
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 59

    (56) expression -> expression EQ_LESS . expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 98
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 60

    (57) expression -> expression NOT_EQEQ . expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 99
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 61

    (58) expression -> expression EQEQ . expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 100
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 62

    (59) expression -> expression % . expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 101
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 63

    (60) expression -> expression * . expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 102
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 64

    (61) expression -> expression / . expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 103
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 65

    (62) expression -> expression - . expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 104
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 66

    (63) expression -> expression + . expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 105
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 67

    (12) python_code_stmt -> python_code ; .
    KWORD           reduce using rule 12 (python_code_stmt -> python_code ; .)
    ID              reduce using rule 12 (python_code_stmt -> python_code ; .)
    CLASS           reduce using rule 12 (python_code_stmt -> python_code ; .)
    FUNC            reduce using rule 12 (python_code_stmt -> python_code ; .)
    PYTHON_CODE     reduce using rule 12 (python_code_stmt -> python_code ; .)
    IF              reduce using rule 12 (python_code_stmt -> python_code ; .)
    (               reduce using rule 12 (python_code_stmt -> python_code ; .)
    !               reduce using rule 12 (python_code_stmt -> python_code ; .)
    +               reduce using rule 12 (python_code_stmt -> python_code ; .)
    -               reduce using rule 12 (python_code_stmt -> python_code ; .)
    [               reduce using rule 12 (python_code_stmt -> python_code ; .)
    {               reduce using rule 12 (python_code_stmt -> python_code ; .)
    STRING          reduce using rule 12 (python_code_stmt -> python_code ; .)
    FALSE           reduce using rule 12 (python_code_stmt -> python_code ; .)
    TRUE            reduce using rule 12 (python_code_stmt -> python_code ; .)
    FLOAT           reduce using rule 12 (python_code_stmt -> python_code ; .)
    INT             reduce using rule 12 (python_code_stmt -> python_code ; .)
    $end            reduce using rule 12 (python_code_stmt -> python_code ; .)
    }               reduce using rule 12 (python_code_stmt -> python_code ; .)


state 68

    (29) conditional -> if_statement else_statement .
    KWORD           reduce using rule 29 (conditional -> if_statement else_statement .)
    ID              reduce using rule 29 (conditional -> if_statement else_statement .)
    CLASS           reduce using rule 29 (conditional -> if_statement else_statement .)
    FUNC            reduce using rule 29 (conditional -> if_statement else_statement .)
    PYTHON_CODE     reduce using rule 29 (conditional -> if_statement else_statement .)
    IF              reduce using rule 29 (conditional -> if_statement else_statement .)
    (               reduce using rule 29 (conditional -> if_statement else_statement .)
    !               reduce using rule 29 (conditional -> if_statement else_statement .)
    +               reduce using rule 29 (conditional -> if_statement else_statement .)
    -               reduce using rule 29 (conditional -> if_statement else_statement .)
    [               reduce using rule 29 (conditional -> if_statement else_statement .)
    {               reduce using rule 29 (conditional -> if_statement else_statement .)
    STRING          reduce using rule 29 (conditional -> if_statement else_statement .)
    FALSE           reduce using rule 29 (conditional -> if_statement else_statement .)
    TRUE            reduce using rule 29 (conditional -> if_statement else_statement .)
    FLOAT           reduce using rule 29 (conditional -> if_statement else_statement .)
    INT             reduce using rule 29 (conditional -> if_statement else_statement .)
    $end            reduce using rule 29 (conditional -> if_statement else_statement .)
    }               reduce using rule 29 (conditional -> if_statement else_statement .)


state 69

    (30) conditional -> if_statement else_if_loop . else_statement
    (31) conditional -> if_statement else_if_loop .
    (35) else_if_loop -> else_if_loop . else_if_statement
    (37) else_statement -> . ELSE { program }
    (36) else_if_statement -> . ELSE IF ( expression ) { program }
    KWORD           reduce using rule 31 (conditional -> if_statement else_if_loop .)
    ID              reduce using rule 31 (conditional -> if_statement else_if_loop .)
    CLASS           reduce using rule 31 (conditional -> if_statement else_if_loop .)
    FUNC            reduce using rule 31 (conditional -> if_statement else_if_loop .)
    PYTHON_CODE     reduce using rule 31 (conditional -> if_statement else_if_loop .)
    IF              reduce using rule 31 (conditional -> if_statement else_if_loop .)
    (               reduce using rule 31 (conditional -> if_statement else_if_loop .)
    !               reduce using rule 31 (conditional -> if_statement else_if_loop .)
    +               reduce using rule 31 (conditional -> if_statement else_if_loop .)
    -               reduce using rule 31 (conditional -> if_statement else_if_loop .)
    [               reduce using rule 31 (conditional -> if_statement else_if_loop .)
    {               reduce using rule 31 (conditional -> if_statement else_if_loop .)
    STRING          reduce using rule 31 (conditional -> if_statement else_if_loop .)
    FALSE           reduce using rule 31 (conditional -> if_statement else_if_loop .)
    TRUE            reduce using rule 31 (conditional -> if_statement else_if_loop .)
    FLOAT           reduce using rule 31 (conditional -> if_statement else_if_loop .)
    INT             reduce using rule 31 (conditional -> if_statement else_if_loop .)
    $end            reduce using rule 31 (conditional -> if_statement else_if_loop .)
    }               reduce using rule 31 (conditional -> if_statement else_if_loop .)
    ELSE            shift and go to state 70

    else_statement                 shift and go to state 106
    else_if_statement              shift and go to state 107

state 70

    (37) else_statement -> ELSE . { program }
    (36) else_if_statement -> ELSE . IF ( expression ) { program }
    {               shift and go to state 108
    IF              shift and go to state 109


state 71

    (34) else_if_loop -> else_if_statement .
    ELSE            reduce using rule 34 (else_if_loop -> else_if_statement .)
    KWORD           reduce using rule 34 (else_if_loop -> else_if_statement .)
    ID              reduce using rule 34 (else_if_loop -> else_if_statement .)
    CLASS           reduce using rule 34 (else_if_loop -> else_if_statement .)
    FUNC            reduce using rule 34 (else_if_loop -> else_if_statement .)
    PYTHON_CODE     reduce using rule 34 (else_if_loop -> else_if_statement .)
    IF              reduce using rule 34 (else_if_loop -> else_if_statement .)
    (               reduce using rule 34 (else_if_loop -> else_if_statement .)
    !               reduce using rule 34 (else_if_loop -> else_if_statement .)
    +               reduce using rule 34 (else_if_loop -> else_if_statement .)
    -               reduce using rule 34 (else_if_loop -> else_if_statement .)
    [               reduce using rule 34 (else_if_loop -> else_if_statement .)
    {               reduce using rule 34 (else_if_loop -> else_if_statement .)
    STRING          reduce using rule 34 (else_if_loop -> else_if_statement .)
    FALSE           reduce using rule 34 (else_if_loop -> else_if_statement .)
    TRUE            reduce using rule 34 (else_if_loop -> else_if_statement .)
    FLOAT           reduce using rule 34 (else_if_loop -> else_if_statement .)
    INT             reduce using rule 34 (else_if_loop -> else_if_statement .)
    $end            reduce using rule 34 (else_if_loop -> else_if_statement .)
    }               reduce using rule 34 (else_if_loop -> else_if_statement .)


state 72

    (28) class_attribute_assignment -> class_attribute = . expression ;
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    class_attribute                shift and go to state 46
    expression                     shift and go to state 110
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 73

    (11) function_call_stmt -> function_call ; .
    KWORD           reduce using rule 11 (function_call_stmt -> function_call ; .)
    ID              reduce using rule 11 (function_call_stmt -> function_call ; .)
    CLASS           reduce using rule 11 (function_call_stmt -> function_call ; .)
    FUNC            reduce using rule 11 (function_call_stmt -> function_call ; .)
    PYTHON_CODE     reduce using rule 11 (function_call_stmt -> function_call ; .)
    IF              reduce using rule 11 (function_call_stmt -> function_call ; .)
    (               reduce using rule 11 (function_call_stmt -> function_call ; .)
    !               reduce using rule 11 (function_call_stmt -> function_call ; .)
    +               reduce using rule 11 (function_call_stmt -> function_call ; .)
    -               reduce using rule 11 (function_call_stmt -> function_call ; .)
    [               reduce using rule 11 (function_call_stmt -> function_call ; .)
    {               reduce using rule 11 (function_call_stmt -> function_call ; .)
    STRING          reduce using rule 11 (function_call_stmt -> function_call ; .)
    FALSE           reduce using rule 11 (function_call_stmt -> function_call ; .)
    TRUE            reduce using rule 11 (function_call_stmt -> function_call ; .)
    FLOAT           reduce using rule 11 (function_call_stmt -> function_call ; .)
    INT             reduce using rule 11 (function_call_stmt -> function_call ; .)
    $end            reduce using rule 11 (function_call_stmt -> function_call ; .)
    }               reduce using rule 11 (function_call_stmt -> function_call ; .)


state 74

    (22) class_declaration -> CLASS ID . { program }
    {               shift and go to state 111


state 75

    (15) function_declaration -> FUNC ID . ( empty ) { program }
    (16) function_declaration -> FUNC ID . ( function_arguments ) { program }
    (               shift and go to state 112


state 76

    (33) if_statement -> IF ( . expression ) { program }
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 113
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 77

    (52) expression -> ! expression .
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    (               reduce using rule 52 (expression -> ! expression .)
    >               reduce using rule 52 (expression -> ! expression .)
    <               reduce using rule 52 (expression -> ! expression .)
    &               reduce using rule 52 (expression -> ! expression .)
    |               reduce using rule 52 (expression -> ! expression .)
    EQ_GREATER      reduce using rule 52 (expression -> ! expression .)
    EQ_LESS         reduce using rule 52 (expression -> ! expression .)
    NOT_EQEQ        reduce using rule 52 (expression -> ! expression .)
    EQEQ            reduce using rule 52 (expression -> ! expression .)
    %               reduce using rule 52 (expression -> ! expression .)
    *               reduce using rule 52 (expression -> ! expression .)
    /               reduce using rule 52 (expression -> ! expression .)
    -               reduce using rule 52 (expression -> ! expression .)
    +               reduce using rule 52 (expression -> ! expression .)
    )               reduce using rule 52 (expression -> ! expression .)
    ,               reduce using rule 52 (expression -> ! expression .)
    }               reduce using rule 52 (expression -> ! expression .)
    ]               reduce using rule 52 (expression -> ! expression .)
    ;               reduce using rule 52 (expression -> ! expression .)
    COLON_COLON     shift and go to state 52


state 78

    (65) expression -> - expression .
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    (               reduce using rule 65 (expression -> - expression .)
    >               reduce using rule 65 (expression -> - expression .)
    <               reduce using rule 65 (expression -> - expression .)
    &               reduce using rule 65 (expression -> - expression .)
    |               reduce using rule 65 (expression -> - expression .)
    EQ_GREATER      reduce using rule 65 (expression -> - expression .)
    EQ_LESS         reduce using rule 65 (expression -> - expression .)
    NOT_EQEQ        reduce using rule 65 (expression -> - expression .)
    EQEQ            reduce using rule 65 (expression -> - expression .)
    %               reduce using rule 65 (expression -> - expression .)
    *               reduce using rule 65 (expression -> - expression .)
    /               reduce using rule 65 (expression -> - expression .)
    -               reduce using rule 65 (expression -> - expression .)
    +               reduce using rule 65 (expression -> - expression .)
    )               reduce using rule 65 (expression -> - expression .)
    ,               reduce using rule 65 (expression -> - expression .)
    }               reduce using rule 65 (expression -> - expression .)
    ]               reduce using rule 65 (expression -> - expression .)
    ;               reduce using rule 65 (expression -> - expression .)
    COLON_COLON     shift and go to state 52


state 79

    (64) expression -> + expression .
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    (               reduce using rule 64 (expression -> + expression .)
    >               reduce using rule 64 (expression -> + expression .)
    <               reduce using rule 64 (expression -> + expression .)
    &               reduce using rule 64 (expression -> + expression .)
    |               reduce using rule 64 (expression -> + expression .)
    EQ_GREATER      reduce using rule 64 (expression -> + expression .)
    EQ_LESS         reduce using rule 64 (expression -> + expression .)
    NOT_EQEQ        reduce using rule 64 (expression -> + expression .)
    EQEQ            reduce using rule 64 (expression -> + expression .)
    %               reduce using rule 64 (expression -> + expression .)
    *               reduce using rule 64 (expression -> + expression .)
    /               reduce using rule 64 (expression -> + expression .)
    -               reduce using rule 64 (expression -> + expression .)
    +               reduce using rule 64 (expression -> + expression .)
    )               reduce using rule 64 (expression -> + expression .)
    ,               reduce using rule 64 (expression -> + expression .)
    }               reduce using rule 64 (expression -> + expression .)
    ]               reduce using rule 64 (expression -> + expression .)
    ;               reduce using rule 64 (expression -> + expression .)
    COLON_COLON     shift and go to state 52


state 80

    (67) _list -> [ positional_args . ]
    (24) positional_args -> positional_args . , expression
    ]               shift and go to state 114
    ,               shift and go to state 85


state 81

    (17) kword_declaration -> KWORD ID ( . empty ) { program }
    (18) kword_declaration -> KWORD ID ( . function_arguments ) { program }
    (77) empty -> .
    (19) function_arguments -> . kwargs
    (20) function_arguments -> . positional_args , kwargs
    (21) function_arguments -> . positional_args
    (25) kwargs -> . ID = expression
    (26) kwargs -> . kwargs , id = expression
    (23) positional_args -> . expression
    (24) positional_args -> . positional_args , expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    )               reduce using rule 77 (empty -> .)
    ID              shift and go to state 92
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    empty                          shift and go to state 115
    function_arguments             shift and go to state 116
    kwargs                         shift and go to state 90
    positional_args                shift and go to state 91
    expression                     shift and go to state 51
    id                             shift and go to state 27
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 82

    (27) variable_assignment -> ID = expression . ;
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    ;               shift and go to state 117
    >               shift and go to state 54
    <               shift and go to state 55
    &               shift and go to state 56
    |               shift and go to state 57
    EQ_GREATER      shift and go to state 58
    EQ_LESS         shift and go to state 59
    NOT_EQEQ        shift and go to state 60
    EQEQ            shift and go to state 61
    %               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    -               shift and go to state 65
    +               shift and go to state 66
    COLON_COLON     shift and go to state 52
    (               shift and go to state 53


state 83

    (49) expression -> ( expression ) .
    COLON_COLON     reduce using rule 49 (expression -> ( expression ) .)
    (               reduce using rule 49 (expression -> ( expression ) .)
    >               reduce using rule 49 (expression -> ( expression ) .)
    <               reduce using rule 49 (expression -> ( expression ) .)
    &               reduce using rule 49 (expression -> ( expression ) .)
    |               reduce using rule 49 (expression -> ( expression ) .)
    EQ_GREATER      reduce using rule 49 (expression -> ( expression ) .)
    EQ_LESS         reduce using rule 49 (expression -> ( expression ) .)
    NOT_EQEQ        reduce using rule 49 (expression -> ( expression ) .)
    EQEQ            reduce using rule 49 (expression -> ( expression ) .)
    %               reduce using rule 49 (expression -> ( expression ) .)
    *               reduce using rule 49 (expression -> ( expression ) .)
    /               reduce using rule 49 (expression -> ( expression ) .)
    -               reduce using rule 49 (expression -> ( expression ) .)
    +               reduce using rule 49 (expression -> ( expression ) .)
    )               reduce using rule 49 (expression -> ( expression ) .)
    ,               reduce using rule 49 (expression -> ( expression ) .)
    }               reduce using rule 49 (expression -> ( expression ) .)
    ]               reduce using rule 49 (expression -> ( expression ) .)
    ;               reduce using rule 49 (expression -> ( expression ) .)


state 84

    (68) _numpy -> ( positional_args ) .
    COLON_COLON     reduce using rule 68 (_numpy -> ( positional_args ) .)
    (               reduce using rule 68 (_numpy -> ( positional_args ) .)
    >               reduce using rule 68 (_numpy -> ( positional_args ) .)
    <               reduce using rule 68 (_numpy -> ( positional_args ) .)
    &               reduce using rule 68 (_numpy -> ( positional_args ) .)
    |               reduce using rule 68 (_numpy -> ( positional_args ) .)
    EQ_GREATER      reduce using rule 68 (_numpy -> ( positional_args ) .)
    EQ_LESS         reduce using rule 68 (_numpy -> ( positional_args ) .)
    NOT_EQEQ        reduce using rule 68 (_numpy -> ( positional_args ) .)
    EQEQ            reduce using rule 68 (_numpy -> ( positional_args ) .)
    %               reduce using rule 68 (_numpy -> ( positional_args ) .)
    *               reduce using rule 68 (_numpy -> ( positional_args ) .)
    /               reduce using rule 68 (_numpy -> ( positional_args ) .)
    -               reduce using rule 68 (_numpy -> ( positional_args ) .)
    +               reduce using rule 68 (_numpy -> ( positional_args ) .)
    )               reduce using rule 68 (_numpy -> ( positional_args ) .)
    ,               reduce using rule 68 (_numpy -> ( positional_args ) .)
    }               reduce using rule 68 (_numpy -> ( positional_args ) .)
    ]               reduce using rule 68 (_numpy -> ( positional_args ) .)
    ;               reduce using rule 68 (_numpy -> ( positional_args ) .)


state 85

    (24) positional_args -> positional_args , . expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 118
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 86

    (66) _tuple -> { positional_args } .
    COLON_COLON     reduce using rule 66 (_tuple -> { positional_args } .)
    (               reduce using rule 66 (_tuple -> { positional_args } .)
    >               reduce using rule 66 (_tuple -> { positional_args } .)
    <               reduce using rule 66 (_tuple -> { positional_args } .)
    &               reduce using rule 66 (_tuple -> { positional_args } .)
    |               reduce using rule 66 (_tuple -> { positional_args } .)
    EQ_GREATER      reduce using rule 66 (_tuple -> { positional_args } .)
    EQ_LESS         reduce using rule 66 (_tuple -> { positional_args } .)
    NOT_EQEQ        reduce using rule 66 (_tuple -> { positional_args } .)
    EQEQ            reduce using rule 66 (_tuple -> { positional_args } .)
    %               reduce using rule 66 (_tuple -> { positional_args } .)
    *               reduce using rule 66 (_tuple -> { positional_args } .)
    /               reduce using rule 66 (_tuple -> { positional_args } .)
    -               reduce using rule 66 (_tuple -> { positional_args } .)
    +               reduce using rule 66 (_tuple -> { positional_args } .)
    )               reduce using rule 66 (_tuple -> { positional_args } .)
    ,               reduce using rule 66 (_tuple -> { positional_args } .)
    }               reduce using rule 66 (_tuple -> { positional_args } .)
    ]               reduce using rule 66 (_tuple -> { positional_args } .)
    ;               reduce using rule 66 (_tuple -> { positional_args } .)


state 87

    (74) class_attribute -> expression COLON_COLON ID .
    =               reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)
    COLON_COLON     reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)
    (               reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)
    >               reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)
    <               reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)
    &               reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)
    |               reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)
    EQ_GREATER      reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)
    EQ_LESS         reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)
    NOT_EQEQ        reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)
    EQEQ            reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)
    %               reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)
    *               reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)
    /               reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)
    -               reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)
    +               reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)
    )               reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)
    ,               reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)
    }               reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)
    ]               reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)
    ;               reduce using rule 74 (class_attribute -> expression COLON_COLON ID .)


state 88

    (13) function_call -> expression ( empty . )
    )               shift and go to state 119


state 89

    (14) function_call -> expression ( function_arguments . )
    )               shift and go to state 120


state 90

    (19) function_arguments -> kwargs .
    (26) kwargs -> kwargs . , id = expression
    )               reduce using rule 19 (function_arguments -> kwargs .)
    ,               shift and go to state 121


state 91

    (20) function_arguments -> positional_args . , kwargs
    (21) function_arguments -> positional_args .
    (24) positional_args -> positional_args . , expression
    ,               shift and go to state 122
    )               reduce using rule 21 (function_arguments -> positional_args .)


state 92

    (25) kwargs -> ID . = expression
    (75) id -> ID .
    =               shift and go to state 123
    >               reduce using rule 75 (id -> ID .)
    <               reduce using rule 75 (id -> ID .)
    &               reduce using rule 75 (id -> ID .)
    |               reduce using rule 75 (id -> ID .)
    EQ_GREATER      reduce using rule 75 (id -> ID .)
    EQ_LESS         reduce using rule 75 (id -> ID .)
    NOT_EQEQ        reduce using rule 75 (id -> ID .)
    EQEQ            reduce using rule 75 (id -> ID .)
    %               reduce using rule 75 (id -> ID .)
    *               reduce using rule 75 (id -> ID .)
    /               reduce using rule 75 (id -> ID .)
    -               reduce using rule 75 (id -> ID .)
    +               reduce using rule 75 (id -> ID .)
    COLON_COLON     reduce using rule 75 (id -> ID .)
    (               reduce using rule 75 (id -> ID .)
    ,               reduce using rule 75 (id -> ID .)
    )               reduce using rule 75 (id -> ID .)


state 93

    (50) expression -> expression > expression .
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    (               reduce using rule 50 (expression -> expression > expression .)
    >               reduce using rule 50 (expression -> expression > expression .)
    <               reduce using rule 50 (expression -> expression > expression .)
    &               reduce using rule 50 (expression -> expression > expression .)
    |               reduce using rule 50 (expression -> expression > expression .)
    EQ_GREATER      reduce using rule 50 (expression -> expression > expression .)
    EQ_LESS         reduce using rule 50 (expression -> expression > expression .)
    NOT_EQEQ        reduce using rule 50 (expression -> expression > expression .)
    EQEQ            reduce using rule 50 (expression -> expression > expression .)
    )               reduce using rule 50 (expression -> expression > expression .)
    ,               reduce using rule 50 (expression -> expression > expression .)
    }               reduce using rule 50 (expression -> expression > expression .)
    ]               reduce using rule 50 (expression -> expression > expression .)
    ;               reduce using rule 50 (expression -> expression > expression .)
    %               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    -               shift and go to state 65
    +               shift and go to state 66
    COLON_COLON     shift and go to state 52


state 94

    (51) expression -> expression < expression .
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    (               reduce using rule 51 (expression -> expression < expression .)
    >               reduce using rule 51 (expression -> expression < expression .)
    <               reduce using rule 51 (expression -> expression < expression .)
    &               reduce using rule 51 (expression -> expression < expression .)
    |               reduce using rule 51 (expression -> expression < expression .)
    EQ_GREATER      reduce using rule 51 (expression -> expression < expression .)
    EQ_LESS         reduce using rule 51 (expression -> expression < expression .)
    NOT_EQEQ        reduce using rule 51 (expression -> expression < expression .)
    EQEQ            reduce using rule 51 (expression -> expression < expression .)
    )               reduce using rule 51 (expression -> expression < expression .)
    ,               reduce using rule 51 (expression -> expression < expression .)
    }               reduce using rule 51 (expression -> expression < expression .)
    ]               reduce using rule 51 (expression -> expression < expression .)
    ;               reduce using rule 51 (expression -> expression < expression .)
    %               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    -               shift and go to state 65
    +               shift and go to state 66
    COLON_COLON     shift and go to state 52


state 95

    (53) expression -> expression & expression .
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    (               reduce using rule 53 (expression -> expression & expression .)
    &               reduce using rule 53 (expression -> expression & expression .)
    |               reduce using rule 53 (expression -> expression & expression .)
    )               reduce using rule 53 (expression -> expression & expression .)
    ,               reduce using rule 53 (expression -> expression & expression .)
    }               reduce using rule 53 (expression -> expression & expression .)
    ]               reduce using rule 53 (expression -> expression & expression .)
    ;               reduce using rule 53 (expression -> expression & expression .)
    >               shift and go to state 54
    <               shift and go to state 55
    EQ_GREATER      shift and go to state 58
    EQ_LESS         shift and go to state 59
    NOT_EQEQ        shift and go to state 60
    EQEQ            shift and go to state 61
    %               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    -               shift and go to state 65
    +               shift and go to state 66
    COLON_COLON     shift and go to state 52


state 96

    (54) expression -> expression | expression .
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    (               reduce using rule 54 (expression -> expression | expression .)
    |               reduce using rule 54 (expression -> expression | expression .)
    )               reduce using rule 54 (expression -> expression | expression .)
    ,               reduce using rule 54 (expression -> expression | expression .)
    }               reduce using rule 54 (expression -> expression | expression .)
    ]               reduce using rule 54 (expression -> expression | expression .)
    ;               reduce using rule 54 (expression -> expression | expression .)
    >               shift and go to state 54
    <               shift and go to state 55
    &               shift and go to state 56
    EQ_GREATER      shift and go to state 58
    EQ_LESS         shift and go to state 59
    NOT_EQEQ        shift and go to state 60
    EQEQ            shift and go to state 61
    %               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    -               shift and go to state 65
    +               shift and go to state 66
    COLON_COLON     shift and go to state 52


state 97

    (55) expression -> expression EQ_GREATER expression .
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    (               reduce using rule 55 (expression -> expression EQ_GREATER expression .)
    >               reduce using rule 55 (expression -> expression EQ_GREATER expression .)
    <               reduce using rule 55 (expression -> expression EQ_GREATER expression .)
    &               reduce using rule 55 (expression -> expression EQ_GREATER expression .)
    |               reduce using rule 55 (expression -> expression EQ_GREATER expression .)
    EQ_GREATER      reduce using rule 55 (expression -> expression EQ_GREATER expression .)
    EQ_LESS         reduce using rule 55 (expression -> expression EQ_GREATER expression .)
    NOT_EQEQ        reduce using rule 55 (expression -> expression EQ_GREATER expression .)
    EQEQ            reduce using rule 55 (expression -> expression EQ_GREATER expression .)
    )               reduce using rule 55 (expression -> expression EQ_GREATER expression .)
    ,               reduce using rule 55 (expression -> expression EQ_GREATER expression .)
    }               reduce using rule 55 (expression -> expression EQ_GREATER expression .)
    ]               reduce using rule 55 (expression -> expression EQ_GREATER expression .)
    ;               reduce using rule 55 (expression -> expression EQ_GREATER expression .)
    %               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    -               shift and go to state 65
    +               shift and go to state 66
    COLON_COLON     shift and go to state 52


state 98

    (56) expression -> expression EQ_LESS expression .
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    (               reduce using rule 56 (expression -> expression EQ_LESS expression .)
    >               reduce using rule 56 (expression -> expression EQ_LESS expression .)
    <               reduce using rule 56 (expression -> expression EQ_LESS expression .)
    &               reduce using rule 56 (expression -> expression EQ_LESS expression .)
    |               reduce using rule 56 (expression -> expression EQ_LESS expression .)
    EQ_GREATER      reduce using rule 56 (expression -> expression EQ_LESS expression .)
    EQ_LESS         reduce using rule 56 (expression -> expression EQ_LESS expression .)
    NOT_EQEQ        reduce using rule 56 (expression -> expression EQ_LESS expression .)
    EQEQ            reduce using rule 56 (expression -> expression EQ_LESS expression .)
    )               reduce using rule 56 (expression -> expression EQ_LESS expression .)
    ,               reduce using rule 56 (expression -> expression EQ_LESS expression .)
    }               reduce using rule 56 (expression -> expression EQ_LESS expression .)
    ]               reduce using rule 56 (expression -> expression EQ_LESS expression .)
    ;               reduce using rule 56 (expression -> expression EQ_LESS expression .)
    %               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    -               shift and go to state 65
    +               shift and go to state 66
    COLON_COLON     shift and go to state 52


state 99

    (57) expression -> expression NOT_EQEQ expression .
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    (               reduce using rule 57 (expression -> expression NOT_EQEQ expression .)
    &               reduce using rule 57 (expression -> expression NOT_EQEQ expression .)
    |               reduce using rule 57 (expression -> expression NOT_EQEQ expression .)
    NOT_EQEQ        reduce using rule 57 (expression -> expression NOT_EQEQ expression .)
    EQEQ            reduce using rule 57 (expression -> expression NOT_EQEQ expression .)
    )               reduce using rule 57 (expression -> expression NOT_EQEQ expression .)
    ,               reduce using rule 57 (expression -> expression NOT_EQEQ expression .)
    }               reduce using rule 57 (expression -> expression NOT_EQEQ expression .)
    ]               reduce using rule 57 (expression -> expression NOT_EQEQ expression .)
    ;               reduce using rule 57 (expression -> expression NOT_EQEQ expression .)
    >               shift and go to state 54
    <               shift and go to state 55
    EQ_GREATER      shift and go to state 58
    EQ_LESS         shift and go to state 59
    %               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    -               shift and go to state 65
    +               shift and go to state 66
    COLON_COLON     shift and go to state 52


state 100

    (58) expression -> expression EQEQ expression .
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    (               reduce using rule 58 (expression -> expression EQEQ expression .)
    &               reduce using rule 58 (expression -> expression EQEQ expression .)
    |               reduce using rule 58 (expression -> expression EQEQ expression .)
    NOT_EQEQ        reduce using rule 58 (expression -> expression EQEQ expression .)
    EQEQ            reduce using rule 58 (expression -> expression EQEQ expression .)
    )               reduce using rule 58 (expression -> expression EQEQ expression .)
    ,               reduce using rule 58 (expression -> expression EQEQ expression .)
    }               reduce using rule 58 (expression -> expression EQEQ expression .)
    ]               reduce using rule 58 (expression -> expression EQEQ expression .)
    ;               reduce using rule 58 (expression -> expression EQEQ expression .)
    >               shift and go to state 54
    <               shift and go to state 55
    EQ_GREATER      shift and go to state 58
    EQ_LESS         shift and go to state 59
    %               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    -               shift and go to state 65
    +               shift and go to state 66
    COLON_COLON     shift and go to state 52


state 101

    (59) expression -> expression % expression .
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    (               reduce using rule 59 (expression -> expression % expression .)
    >               reduce using rule 59 (expression -> expression % expression .)
    <               reduce using rule 59 (expression -> expression % expression .)
    &               reduce using rule 59 (expression -> expression % expression .)
    |               reduce using rule 59 (expression -> expression % expression .)
    EQ_GREATER      reduce using rule 59 (expression -> expression % expression .)
    EQ_LESS         reduce using rule 59 (expression -> expression % expression .)
    NOT_EQEQ        reduce using rule 59 (expression -> expression % expression .)
    EQEQ            reduce using rule 59 (expression -> expression % expression .)
    %               reduce using rule 59 (expression -> expression % expression .)
    *               reduce using rule 59 (expression -> expression % expression .)
    /               reduce using rule 59 (expression -> expression % expression .)
    -               reduce using rule 59 (expression -> expression % expression .)
    +               reduce using rule 59 (expression -> expression % expression .)
    )               reduce using rule 59 (expression -> expression % expression .)
    ,               reduce using rule 59 (expression -> expression % expression .)
    }               reduce using rule 59 (expression -> expression % expression .)
    ]               reduce using rule 59 (expression -> expression % expression .)
    ;               reduce using rule 59 (expression -> expression % expression .)
    COLON_COLON     shift and go to state 52


state 102

    (60) expression -> expression * expression .
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    (               reduce using rule 60 (expression -> expression * expression .)
    >               reduce using rule 60 (expression -> expression * expression .)
    <               reduce using rule 60 (expression -> expression * expression .)
    &               reduce using rule 60 (expression -> expression * expression .)
    |               reduce using rule 60 (expression -> expression * expression .)
    EQ_GREATER      reduce using rule 60 (expression -> expression * expression .)
    EQ_LESS         reduce using rule 60 (expression -> expression * expression .)
    NOT_EQEQ        reduce using rule 60 (expression -> expression * expression .)
    EQEQ            reduce using rule 60 (expression -> expression * expression .)
    %               reduce using rule 60 (expression -> expression * expression .)
    *               reduce using rule 60 (expression -> expression * expression .)
    /               reduce using rule 60 (expression -> expression * expression .)
    -               reduce using rule 60 (expression -> expression * expression .)
    +               reduce using rule 60 (expression -> expression * expression .)
    )               reduce using rule 60 (expression -> expression * expression .)
    ,               reduce using rule 60 (expression -> expression * expression .)
    }               reduce using rule 60 (expression -> expression * expression .)
    ]               reduce using rule 60 (expression -> expression * expression .)
    ;               reduce using rule 60 (expression -> expression * expression .)
    COLON_COLON     shift and go to state 52


state 103

    (61) expression -> expression / expression .
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    (               reduce using rule 61 (expression -> expression / expression .)
    >               reduce using rule 61 (expression -> expression / expression .)
    <               reduce using rule 61 (expression -> expression / expression .)
    &               reduce using rule 61 (expression -> expression / expression .)
    |               reduce using rule 61 (expression -> expression / expression .)
    EQ_GREATER      reduce using rule 61 (expression -> expression / expression .)
    EQ_LESS         reduce using rule 61 (expression -> expression / expression .)
    NOT_EQEQ        reduce using rule 61 (expression -> expression / expression .)
    EQEQ            reduce using rule 61 (expression -> expression / expression .)
    %               reduce using rule 61 (expression -> expression / expression .)
    *               reduce using rule 61 (expression -> expression / expression .)
    /               reduce using rule 61 (expression -> expression / expression .)
    -               reduce using rule 61 (expression -> expression / expression .)
    +               reduce using rule 61 (expression -> expression / expression .)
    )               reduce using rule 61 (expression -> expression / expression .)
    ,               reduce using rule 61 (expression -> expression / expression .)
    }               reduce using rule 61 (expression -> expression / expression .)
    ]               reduce using rule 61 (expression -> expression / expression .)
    ;               reduce using rule 61 (expression -> expression / expression .)
    COLON_COLON     shift and go to state 52


state 104

    (62) expression -> expression - expression .
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    (               reduce using rule 62 (expression -> expression - expression .)
    >               reduce using rule 62 (expression -> expression - expression .)
    <               reduce using rule 62 (expression -> expression - expression .)
    &               reduce using rule 62 (expression -> expression - expression .)
    |               reduce using rule 62 (expression -> expression - expression .)
    EQ_GREATER      reduce using rule 62 (expression -> expression - expression .)
    EQ_LESS         reduce using rule 62 (expression -> expression - expression .)
    NOT_EQEQ        reduce using rule 62 (expression -> expression - expression .)
    EQEQ            reduce using rule 62 (expression -> expression - expression .)
    -               reduce using rule 62 (expression -> expression - expression .)
    +               reduce using rule 62 (expression -> expression - expression .)
    )               reduce using rule 62 (expression -> expression - expression .)
    ,               reduce using rule 62 (expression -> expression - expression .)
    }               reduce using rule 62 (expression -> expression - expression .)
    ]               reduce using rule 62 (expression -> expression - expression .)
    ;               reduce using rule 62 (expression -> expression - expression .)
    %               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    COLON_COLON     shift and go to state 52


state 105

    (63) expression -> expression + expression .
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    (               reduce using rule 63 (expression -> expression + expression .)
    >               reduce using rule 63 (expression -> expression + expression .)
    <               reduce using rule 63 (expression -> expression + expression .)
    &               reduce using rule 63 (expression -> expression + expression .)
    |               reduce using rule 63 (expression -> expression + expression .)
    EQ_GREATER      reduce using rule 63 (expression -> expression + expression .)
    EQ_LESS         reduce using rule 63 (expression -> expression + expression .)
    NOT_EQEQ        reduce using rule 63 (expression -> expression + expression .)
    EQEQ            reduce using rule 63 (expression -> expression + expression .)
    -               reduce using rule 63 (expression -> expression + expression .)
    +               reduce using rule 63 (expression -> expression + expression .)
    )               reduce using rule 63 (expression -> expression + expression .)
    ,               reduce using rule 63 (expression -> expression + expression .)
    }               reduce using rule 63 (expression -> expression + expression .)
    ]               reduce using rule 63 (expression -> expression + expression .)
    ;               reduce using rule 63 (expression -> expression + expression .)
    %               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    COLON_COLON     shift and go to state 52


state 106

    (30) conditional -> if_statement else_if_loop else_statement .
    KWORD           reduce using rule 30 (conditional -> if_statement else_if_loop else_statement .)
    ID              reduce using rule 30 (conditional -> if_statement else_if_loop else_statement .)
    CLASS           reduce using rule 30 (conditional -> if_statement else_if_loop else_statement .)
    FUNC            reduce using rule 30 (conditional -> if_statement else_if_loop else_statement .)
    PYTHON_CODE     reduce using rule 30 (conditional -> if_statement else_if_loop else_statement .)
    IF              reduce using rule 30 (conditional -> if_statement else_if_loop else_statement .)
    (               reduce using rule 30 (conditional -> if_statement else_if_loop else_statement .)
    !               reduce using rule 30 (conditional -> if_statement else_if_loop else_statement .)
    +               reduce using rule 30 (conditional -> if_statement else_if_loop else_statement .)
    -               reduce using rule 30 (conditional -> if_statement else_if_loop else_statement .)
    [               reduce using rule 30 (conditional -> if_statement else_if_loop else_statement .)
    {               reduce using rule 30 (conditional -> if_statement else_if_loop else_statement .)
    STRING          reduce using rule 30 (conditional -> if_statement else_if_loop else_statement .)
    FALSE           reduce using rule 30 (conditional -> if_statement else_if_loop else_statement .)
    TRUE            reduce using rule 30 (conditional -> if_statement else_if_loop else_statement .)
    FLOAT           reduce using rule 30 (conditional -> if_statement else_if_loop else_statement .)
    INT             reduce using rule 30 (conditional -> if_statement else_if_loop else_statement .)
    $end            reduce using rule 30 (conditional -> if_statement else_if_loop else_statement .)
    }               reduce using rule 30 (conditional -> if_statement else_if_loop else_statement .)


state 107

    (35) else_if_loop -> else_if_loop else_if_statement .
    ELSE            reduce using rule 35 (else_if_loop -> else_if_loop else_if_statement .)
    KWORD           reduce using rule 35 (else_if_loop -> else_if_loop else_if_statement .)
    ID              reduce using rule 35 (else_if_loop -> else_if_loop else_if_statement .)
    CLASS           reduce using rule 35 (else_if_loop -> else_if_loop else_if_statement .)
    FUNC            reduce using rule 35 (else_if_loop -> else_if_loop else_if_statement .)
    PYTHON_CODE     reduce using rule 35 (else_if_loop -> else_if_loop else_if_statement .)
    IF              reduce using rule 35 (else_if_loop -> else_if_loop else_if_statement .)
    (               reduce using rule 35 (else_if_loop -> else_if_loop else_if_statement .)
    !               reduce using rule 35 (else_if_loop -> else_if_loop else_if_statement .)
    +               reduce using rule 35 (else_if_loop -> else_if_loop else_if_statement .)
    -               reduce using rule 35 (else_if_loop -> else_if_loop else_if_statement .)
    [               reduce using rule 35 (else_if_loop -> else_if_loop else_if_statement .)
    {               reduce using rule 35 (else_if_loop -> else_if_loop else_if_statement .)
    STRING          reduce using rule 35 (else_if_loop -> else_if_loop else_if_statement .)
    FALSE           reduce using rule 35 (else_if_loop -> else_if_loop else_if_statement .)
    TRUE            reduce using rule 35 (else_if_loop -> else_if_loop else_if_statement .)
    FLOAT           reduce using rule 35 (else_if_loop -> else_if_loop else_if_statement .)
    INT             reduce using rule 35 (else_if_loop -> else_if_loop else_if_statement .)
    $end            reduce using rule 35 (else_if_loop -> else_if_loop else_if_statement .)
    }               reduce using rule 35 (else_if_loop -> else_if_loop else_if_statement .)


state 108

    (37) else_statement -> ELSE { . program }
    (1) program -> . statement
    (2) program -> . program statement
    (3) statement -> . kword_declaration
    (4) statement -> . variable_assignment
    (5) statement -> . python_code_stmt
    (6) statement -> . conditional
    (7) statement -> . class_attribute_assignment
    (8) statement -> . function_call_stmt
    (9) statement -> . class_declaration
    (10) statement -> . function_declaration
    (17) kword_declaration -> . KWORD ID ( empty ) { program }
    (18) kword_declaration -> . KWORD ID ( function_arguments ) { program }
    (27) variable_assignment -> . ID = expression ;
    (12) python_code_stmt -> . python_code ;
    (29) conditional -> . if_statement else_statement
    (30) conditional -> . if_statement else_if_loop else_statement
    (31) conditional -> . if_statement else_if_loop
    (32) conditional -> . if_statement
    (28) class_attribute_assignment -> . class_attribute = expression ;
    (11) function_call_stmt -> . function_call ;
    (22) class_declaration -> . CLASS ID { program }
    (15) function_declaration -> . FUNC ID ( empty ) { program }
    (16) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (76) python_code -> . PYTHON_CODE
    (33) if_statement -> . IF ( expression ) { program }
    (74) class_attribute -> . expression COLON_COLON ID
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    KWORD           shift and go to state 11
    ID              shift and go to state 12
    CLASS           shift and go to state 20
    FUNC            shift and go to state 21
    PYTHON_CODE     shift and go to state 22
    IF              shift and go to state 23
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40

    program                        shift and go to state 124
    statement                      shift and go to state 2
    kword_declaration              shift and go to state 3
    variable_assignment            shift and go to state 4
    python_code_stmt               shift and go to state 5
    conditional                    shift and go to state 6
    class_attribute_assignment     shift and go to state 7
    function_call_stmt             shift and go to state 8
    class_declaration              shift and go to state 9
    function_declaration           shift and go to state 10
    expression                     shift and go to state 15
    python_code                    shift and go to state 16
    if_statement                   shift and go to state 17
    class_attribute                shift and go to state 18
    function_call                  shift and go to state 19
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31

state 109

    (36) else_if_statement -> ELSE IF . ( expression ) { program }
    (               shift and go to state 125


state 110

    (28) class_attribute_assignment -> class_attribute = expression . ;
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    ;               shift and go to state 126
    >               shift and go to state 54
    <               shift and go to state 55
    &               shift and go to state 56
    |               shift and go to state 57
    EQ_GREATER      shift and go to state 58
    EQ_LESS         shift and go to state 59
    NOT_EQEQ        shift and go to state 60
    EQEQ            shift and go to state 61
    %               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    -               shift and go to state 65
    +               shift and go to state 66
    COLON_COLON     shift and go to state 52
    (               shift and go to state 53


state 111

    (22) class_declaration -> CLASS ID { . program }
    (1) program -> . statement
    (2) program -> . program statement
    (3) statement -> . kword_declaration
    (4) statement -> . variable_assignment
    (5) statement -> . python_code_stmt
    (6) statement -> . conditional
    (7) statement -> . class_attribute_assignment
    (8) statement -> . function_call_stmt
    (9) statement -> . class_declaration
    (10) statement -> . function_declaration
    (17) kword_declaration -> . KWORD ID ( empty ) { program }
    (18) kword_declaration -> . KWORD ID ( function_arguments ) { program }
    (27) variable_assignment -> . ID = expression ;
    (12) python_code_stmt -> . python_code ;
    (29) conditional -> . if_statement else_statement
    (30) conditional -> . if_statement else_if_loop else_statement
    (31) conditional -> . if_statement else_if_loop
    (32) conditional -> . if_statement
    (28) class_attribute_assignment -> . class_attribute = expression ;
    (11) function_call_stmt -> . function_call ;
    (22) class_declaration -> . CLASS ID { program }
    (15) function_declaration -> . FUNC ID ( empty ) { program }
    (16) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (76) python_code -> . PYTHON_CODE
    (33) if_statement -> . IF ( expression ) { program }
    (74) class_attribute -> . expression COLON_COLON ID
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    KWORD           shift and go to state 11
    ID              shift and go to state 12
    CLASS           shift and go to state 20
    FUNC            shift and go to state 21
    PYTHON_CODE     shift and go to state 22
    IF              shift and go to state 23
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40

    program                        shift and go to state 127
    statement                      shift and go to state 2
    kword_declaration              shift and go to state 3
    variable_assignment            shift and go to state 4
    python_code_stmt               shift and go to state 5
    conditional                    shift and go to state 6
    class_attribute_assignment     shift and go to state 7
    function_call_stmt             shift and go to state 8
    class_declaration              shift and go to state 9
    function_declaration           shift and go to state 10
    expression                     shift and go to state 15
    python_code                    shift and go to state 16
    if_statement                   shift and go to state 17
    class_attribute                shift and go to state 18
    function_call                  shift and go to state 19
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31

state 112

    (15) function_declaration -> FUNC ID ( . empty ) { program }
    (16) function_declaration -> FUNC ID ( . function_arguments ) { program }
    (77) empty -> .
    (19) function_arguments -> . kwargs
    (20) function_arguments -> . positional_args , kwargs
    (21) function_arguments -> . positional_args
    (25) kwargs -> . ID = expression
    (26) kwargs -> . kwargs , id = expression
    (23) positional_args -> . expression
    (24) positional_args -> . positional_args , expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    )               reduce using rule 77 (empty -> .)
    ID              shift and go to state 92
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    empty                          shift and go to state 128
    function_arguments             shift and go to state 129
    kwargs                         shift and go to state 90
    positional_args                shift and go to state 91
    expression                     shift and go to state 51
    id                             shift and go to state 27
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 113

    (33) if_statement -> IF ( expression . ) { program }
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    )               shift and go to state 130
    >               shift and go to state 54
    <               shift and go to state 55
    &               shift and go to state 56
    |               shift and go to state 57
    EQ_GREATER      shift and go to state 58
    EQ_LESS         shift and go to state 59
    NOT_EQEQ        shift and go to state 60
    EQEQ            shift and go to state 61
    %               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    -               shift and go to state 65
    +               shift and go to state 66
    COLON_COLON     shift and go to state 52
    (               shift and go to state 53


state 114

    (67) _list -> [ positional_args ] .
    COLON_COLON     reduce using rule 67 (_list -> [ positional_args ] .)
    (               reduce using rule 67 (_list -> [ positional_args ] .)
    >               reduce using rule 67 (_list -> [ positional_args ] .)
    <               reduce using rule 67 (_list -> [ positional_args ] .)
    &               reduce using rule 67 (_list -> [ positional_args ] .)
    |               reduce using rule 67 (_list -> [ positional_args ] .)
    EQ_GREATER      reduce using rule 67 (_list -> [ positional_args ] .)
    EQ_LESS         reduce using rule 67 (_list -> [ positional_args ] .)
    NOT_EQEQ        reduce using rule 67 (_list -> [ positional_args ] .)
    EQEQ            reduce using rule 67 (_list -> [ positional_args ] .)
    %               reduce using rule 67 (_list -> [ positional_args ] .)
    *               reduce using rule 67 (_list -> [ positional_args ] .)
    /               reduce using rule 67 (_list -> [ positional_args ] .)
    -               reduce using rule 67 (_list -> [ positional_args ] .)
    +               reduce using rule 67 (_list -> [ positional_args ] .)
    )               reduce using rule 67 (_list -> [ positional_args ] .)
    ,               reduce using rule 67 (_list -> [ positional_args ] .)
    }               reduce using rule 67 (_list -> [ positional_args ] .)
    ]               reduce using rule 67 (_list -> [ positional_args ] .)
    ;               reduce using rule 67 (_list -> [ positional_args ] .)


state 115

    (17) kword_declaration -> KWORD ID ( empty . ) { program }
    )               shift and go to state 131


state 116

    (18) kword_declaration -> KWORD ID ( function_arguments . ) { program }
    )               shift and go to state 132


state 117

    (27) variable_assignment -> ID = expression ; .
    KWORD           reduce using rule 27 (variable_assignment -> ID = expression ; .)
    ID              reduce using rule 27 (variable_assignment -> ID = expression ; .)
    CLASS           reduce using rule 27 (variable_assignment -> ID = expression ; .)
    FUNC            reduce using rule 27 (variable_assignment -> ID = expression ; .)
    PYTHON_CODE     reduce using rule 27 (variable_assignment -> ID = expression ; .)
    IF              reduce using rule 27 (variable_assignment -> ID = expression ; .)
    (               reduce using rule 27 (variable_assignment -> ID = expression ; .)
    !               reduce using rule 27 (variable_assignment -> ID = expression ; .)
    +               reduce using rule 27 (variable_assignment -> ID = expression ; .)
    -               reduce using rule 27 (variable_assignment -> ID = expression ; .)
    [               reduce using rule 27 (variable_assignment -> ID = expression ; .)
    {               reduce using rule 27 (variable_assignment -> ID = expression ; .)
    STRING          reduce using rule 27 (variable_assignment -> ID = expression ; .)
    FALSE           reduce using rule 27 (variable_assignment -> ID = expression ; .)
    TRUE            reduce using rule 27 (variable_assignment -> ID = expression ; .)
    FLOAT           reduce using rule 27 (variable_assignment -> ID = expression ; .)
    INT             reduce using rule 27 (variable_assignment -> ID = expression ; .)
    $end            reduce using rule 27 (variable_assignment -> ID = expression ; .)
    }               reduce using rule 27 (variable_assignment -> ID = expression ; .)


state 118

    (24) positional_args -> positional_args , expression .
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    )               reduce using rule 24 (positional_args -> positional_args , expression .)
    ,               reduce using rule 24 (positional_args -> positional_args , expression .)
    }               reduce using rule 24 (positional_args -> positional_args , expression .)
    ]               reduce using rule 24 (positional_args -> positional_args , expression .)
    >               shift and go to state 54
    <               shift and go to state 55
    &               shift and go to state 56
    |               shift and go to state 57
    EQ_GREATER      shift and go to state 58
    EQ_LESS         shift and go to state 59
    NOT_EQEQ        shift and go to state 60
    EQEQ            shift and go to state 61
    %               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    -               shift and go to state 65
    +               shift and go to state 66
    COLON_COLON     shift and go to state 52
    (               shift and go to state 53


state 119

    (13) function_call -> expression ( empty ) .
    ;               reduce using rule 13 (function_call -> expression ( empty ) .)
    COLON_COLON     reduce using rule 13 (function_call -> expression ( empty ) .)
    (               reduce using rule 13 (function_call -> expression ( empty ) .)
    >               reduce using rule 13 (function_call -> expression ( empty ) .)
    <               reduce using rule 13 (function_call -> expression ( empty ) .)
    &               reduce using rule 13 (function_call -> expression ( empty ) .)
    |               reduce using rule 13 (function_call -> expression ( empty ) .)
    EQ_GREATER      reduce using rule 13 (function_call -> expression ( empty ) .)
    EQ_LESS         reduce using rule 13 (function_call -> expression ( empty ) .)
    NOT_EQEQ        reduce using rule 13 (function_call -> expression ( empty ) .)
    EQEQ            reduce using rule 13 (function_call -> expression ( empty ) .)
    %               reduce using rule 13 (function_call -> expression ( empty ) .)
    *               reduce using rule 13 (function_call -> expression ( empty ) .)
    /               reduce using rule 13 (function_call -> expression ( empty ) .)
    -               reduce using rule 13 (function_call -> expression ( empty ) .)
    +               reduce using rule 13 (function_call -> expression ( empty ) .)
    )               reduce using rule 13 (function_call -> expression ( empty ) .)
    ,               reduce using rule 13 (function_call -> expression ( empty ) .)
    }               reduce using rule 13 (function_call -> expression ( empty ) .)
    ]               reduce using rule 13 (function_call -> expression ( empty ) .)


state 120

    (14) function_call -> expression ( function_arguments ) .
    ;               reduce using rule 14 (function_call -> expression ( function_arguments ) .)
    COLON_COLON     reduce using rule 14 (function_call -> expression ( function_arguments ) .)
    (               reduce using rule 14 (function_call -> expression ( function_arguments ) .)
    >               reduce using rule 14 (function_call -> expression ( function_arguments ) .)
    <               reduce using rule 14 (function_call -> expression ( function_arguments ) .)
    &               reduce using rule 14 (function_call -> expression ( function_arguments ) .)
    |               reduce using rule 14 (function_call -> expression ( function_arguments ) .)
    EQ_GREATER      reduce using rule 14 (function_call -> expression ( function_arguments ) .)
    EQ_LESS         reduce using rule 14 (function_call -> expression ( function_arguments ) .)
    NOT_EQEQ        reduce using rule 14 (function_call -> expression ( function_arguments ) .)
    EQEQ            reduce using rule 14 (function_call -> expression ( function_arguments ) .)
    %               reduce using rule 14 (function_call -> expression ( function_arguments ) .)
    *               reduce using rule 14 (function_call -> expression ( function_arguments ) .)
    /               reduce using rule 14 (function_call -> expression ( function_arguments ) .)
    -               reduce using rule 14 (function_call -> expression ( function_arguments ) .)
    +               reduce using rule 14 (function_call -> expression ( function_arguments ) .)
    )               reduce using rule 14 (function_call -> expression ( function_arguments ) .)
    ,               reduce using rule 14 (function_call -> expression ( function_arguments ) .)
    }               reduce using rule 14 (function_call -> expression ( function_arguments ) .)
    ]               reduce using rule 14 (function_call -> expression ( function_arguments ) .)


state 121

    (26) kwargs -> kwargs , . id = expression
    (75) id -> . ID
    ID              shift and go to state 49

    id                             shift and go to state 133

state 122

    (20) function_arguments -> positional_args , . kwargs
    (24) positional_args -> positional_args , . expression
    (25) kwargs -> . ID = expression
    (26) kwargs -> . kwargs , id = expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    ID              shift and go to state 92
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    kwargs                         shift and go to state 134
    expression                     shift and go to state 118
    id                             shift and go to state 27
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 123

    (25) kwargs -> ID = . expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 135
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 124

    (37) else_statement -> ELSE { program . }
    (2) program -> program . statement
    (3) statement -> . kword_declaration
    (4) statement -> . variable_assignment
    (5) statement -> . python_code_stmt
    (6) statement -> . conditional
    (7) statement -> . class_attribute_assignment
    (8) statement -> . function_call_stmt
    (9) statement -> . class_declaration
    (10) statement -> . function_declaration
    (17) kword_declaration -> . KWORD ID ( empty ) { program }
    (18) kword_declaration -> . KWORD ID ( function_arguments ) { program }
    (27) variable_assignment -> . ID = expression ;
    (12) python_code_stmt -> . python_code ;
    (29) conditional -> . if_statement else_statement
    (30) conditional -> . if_statement else_if_loop else_statement
    (31) conditional -> . if_statement else_if_loop
    (32) conditional -> . if_statement
    (28) class_attribute_assignment -> . class_attribute = expression ;
    (11) function_call_stmt -> . function_call ;
    (22) class_declaration -> . CLASS ID { program }
    (15) function_declaration -> . FUNC ID ( empty ) { program }
    (16) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (76) python_code -> . PYTHON_CODE
    (33) if_statement -> . IF ( expression ) { program }
    (74) class_attribute -> . expression COLON_COLON ID
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    }               shift and go to state 136
    KWORD           shift and go to state 11
    ID              shift and go to state 12
    CLASS           shift and go to state 20
    FUNC            shift and go to state 21
    PYTHON_CODE     shift and go to state 22
    IF              shift and go to state 23
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40

    statement                      shift and go to state 41
    kword_declaration              shift and go to state 3
    variable_assignment            shift and go to state 4
    python_code_stmt               shift and go to state 5
    conditional                    shift and go to state 6
    class_attribute_assignment     shift and go to state 7
    function_call_stmt             shift and go to state 8
    class_declaration              shift and go to state 9
    function_declaration           shift and go to state 10
    expression                     shift and go to state 15
    python_code                    shift and go to state 16
    if_statement                   shift and go to state 17
    class_attribute                shift and go to state 18
    function_call                  shift and go to state 19
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31

state 125

    (36) else_if_statement -> ELSE IF ( . expression ) { program }
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    expression                     shift and go to state 137
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 126

    (28) class_attribute_assignment -> class_attribute = expression ; .
    KWORD           reduce using rule 28 (class_attribute_assignment -> class_attribute = expression ; .)
    ID              reduce using rule 28 (class_attribute_assignment -> class_attribute = expression ; .)
    CLASS           reduce using rule 28 (class_attribute_assignment -> class_attribute = expression ; .)
    FUNC            reduce using rule 28 (class_attribute_assignment -> class_attribute = expression ; .)
    PYTHON_CODE     reduce using rule 28 (class_attribute_assignment -> class_attribute = expression ; .)
    IF              reduce using rule 28 (class_attribute_assignment -> class_attribute = expression ; .)
    (               reduce using rule 28 (class_attribute_assignment -> class_attribute = expression ; .)
    !               reduce using rule 28 (class_attribute_assignment -> class_attribute = expression ; .)
    +               reduce using rule 28 (class_attribute_assignment -> class_attribute = expression ; .)
    -               reduce using rule 28 (class_attribute_assignment -> class_attribute = expression ; .)
    [               reduce using rule 28 (class_attribute_assignment -> class_attribute = expression ; .)
    {               reduce using rule 28 (class_attribute_assignment -> class_attribute = expression ; .)
    STRING          reduce using rule 28 (class_attribute_assignment -> class_attribute = expression ; .)
    FALSE           reduce using rule 28 (class_attribute_assignment -> class_attribute = expression ; .)
    TRUE            reduce using rule 28 (class_attribute_assignment -> class_attribute = expression ; .)
    FLOAT           reduce using rule 28 (class_attribute_assignment -> class_attribute = expression ; .)
    INT             reduce using rule 28 (class_attribute_assignment -> class_attribute = expression ; .)
    $end            reduce using rule 28 (class_attribute_assignment -> class_attribute = expression ; .)
    }               reduce using rule 28 (class_attribute_assignment -> class_attribute = expression ; .)


state 127

    (22) class_declaration -> CLASS ID { program . }
    (2) program -> program . statement
    (3) statement -> . kword_declaration
    (4) statement -> . variable_assignment
    (5) statement -> . python_code_stmt
    (6) statement -> . conditional
    (7) statement -> . class_attribute_assignment
    (8) statement -> . function_call_stmt
    (9) statement -> . class_declaration
    (10) statement -> . function_declaration
    (17) kword_declaration -> . KWORD ID ( empty ) { program }
    (18) kword_declaration -> . KWORD ID ( function_arguments ) { program }
    (27) variable_assignment -> . ID = expression ;
    (12) python_code_stmt -> . python_code ;
    (29) conditional -> . if_statement else_statement
    (30) conditional -> . if_statement else_if_loop else_statement
    (31) conditional -> . if_statement else_if_loop
    (32) conditional -> . if_statement
    (28) class_attribute_assignment -> . class_attribute = expression ;
    (11) function_call_stmt -> . function_call ;
    (22) class_declaration -> . CLASS ID { program }
    (15) function_declaration -> . FUNC ID ( empty ) { program }
    (16) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (76) python_code -> . PYTHON_CODE
    (33) if_statement -> . IF ( expression ) { program }
    (74) class_attribute -> . expression COLON_COLON ID
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    }               shift and go to state 138
    KWORD           shift and go to state 11
    ID              shift and go to state 12
    CLASS           shift and go to state 20
    FUNC            shift and go to state 21
    PYTHON_CODE     shift and go to state 22
    IF              shift and go to state 23
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40

    statement                      shift and go to state 41
    kword_declaration              shift and go to state 3
    variable_assignment            shift and go to state 4
    python_code_stmt               shift and go to state 5
    conditional                    shift and go to state 6
    class_attribute_assignment     shift and go to state 7
    function_call_stmt             shift and go to state 8
    class_declaration              shift and go to state 9
    function_declaration           shift and go to state 10
    expression                     shift and go to state 15
    python_code                    shift and go to state 16
    if_statement                   shift and go to state 17
    class_attribute                shift and go to state 18
    function_call                  shift and go to state 19
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31

state 128

    (15) function_declaration -> FUNC ID ( empty . ) { program }
    )               shift and go to state 139


state 129

    (16) function_declaration -> FUNC ID ( function_arguments . ) { program }
    )               shift and go to state 140


state 130

    (33) if_statement -> IF ( expression ) . { program }
    {               shift and go to state 141


state 131

    (17) kword_declaration -> KWORD ID ( empty ) . { program }
    {               shift and go to state 142


state 132

    (18) kword_declaration -> KWORD ID ( function_arguments ) . { program }
    {               shift and go to state 143


state 133

    (26) kwargs -> kwargs , id . = expression
    =               shift and go to state 144


state 134

    (20) function_arguments -> positional_args , kwargs .
    (26) kwargs -> kwargs . , id = expression
    )               reduce using rule 20 (function_arguments -> positional_args , kwargs .)
    ,               shift and go to state 121


state 135

    (25) kwargs -> ID = expression .
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    ,               reduce using rule 25 (kwargs -> ID = expression .)
    )               reduce using rule 25 (kwargs -> ID = expression .)
    >               shift and go to state 54
    <               shift and go to state 55
    &               shift and go to state 56
    |               shift and go to state 57
    EQ_GREATER      shift and go to state 58
    EQ_LESS         shift and go to state 59
    NOT_EQEQ        shift and go to state 60
    EQEQ            shift and go to state 61
    %               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    -               shift and go to state 65
    +               shift and go to state 66
    COLON_COLON     shift and go to state 52
    (               shift and go to state 53


state 136

    (37) else_statement -> ELSE { program } .
    KWORD           reduce using rule 37 (else_statement -> ELSE { program } .)
    ID              reduce using rule 37 (else_statement -> ELSE { program } .)
    CLASS           reduce using rule 37 (else_statement -> ELSE { program } .)
    FUNC            reduce using rule 37 (else_statement -> ELSE { program } .)
    PYTHON_CODE     reduce using rule 37 (else_statement -> ELSE { program } .)
    IF              reduce using rule 37 (else_statement -> ELSE { program } .)
    (               reduce using rule 37 (else_statement -> ELSE { program } .)
    !               reduce using rule 37 (else_statement -> ELSE { program } .)
    +               reduce using rule 37 (else_statement -> ELSE { program } .)
    -               reduce using rule 37 (else_statement -> ELSE { program } .)
    [               reduce using rule 37 (else_statement -> ELSE { program } .)
    {               reduce using rule 37 (else_statement -> ELSE { program } .)
    STRING          reduce using rule 37 (else_statement -> ELSE { program } .)
    FALSE           reduce using rule 37 (else_statement -> ELSE { program } .)
    TRUE            reduce using rule 37 (else_statement -> ELSE { program } .)
    FLOAT           reduce using rule 37 (else_statement -> ELSE { program } .)
    INT             reduce using rule 37 (else_statement -> ELSE { program } .)
    $end            reduce using rule 37 (else_statement -> ELSE { program } .)
    }               reduce using rule 37 (else_statement -> ELSE { program } .)


state 137

    (36) else_if_statement -> ELSE IF ( expression . ) { program }
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    )               shift and go to state 145
    >               shift and go to state 54
    <               shift and go to state 55
    &               shift and go to state 56
    |               shift and go to state 57
    EQ_GREATER      shift and go to state 58
    EQ_LESS         shift and go to state 59
    NOT_EQEQ        shift and go to state 60
    EQEQ            shift and go to state 61
    %               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    -               shift and go to state 65
    +               shift and go to state 66
    COLON_COLON     shift and go to state 52
    (               shift and go to state 53


state 138

    (22) class_declaration -> CLASS ID { program } .
    KWORD           reduce using rule 22 (class_declaration -> CLASS ID { program } .)
    ID              reduce using rule 22 (class_declaration -> CLASS ID { program } .)
    CLASS           reduce using rule 22 (class_declaration -> CLASS ID { program } .)
    FUNC            reduce using rule 22 (class_declaration -> CLASS ID { program } .)
    PYTHON_CODE     reduce using rule 22 (class_declaration -> CLASS ID { program } .)
    IF              reduce using rule 22 (class_declaration -> CLASS ID { program } .)
    (               reduce using rule 22 (class_declaration -> CLASS ID { program } .)
    !               reduce using rule 22 (class_declaration -> CLASS ID { program } .)
    +               reduce using rule 22 (class_declaration -> CLASS ID { program } .)
    -               reduce using rule 22 (class_declaration -> CLASS ID { program } .)
    [               reduce using rule 22 (class_declaration -> CLASS ID { program } .)
    {               reduce using rule 22 (class_declaration -> CLASS ID { program } .)
    STRING          reduce using rule 22 (class_declaration -> CLASS ID { program } .)
    FALSE           reduce using rule 22 (class_declaration -> CLASS ID { program } .)
    TRUE            reduce using rule 22 (class_declaration -> CLASS ID { program } .)
    FLOAT           reduce using rule 22 (class_declaration -> CLASS ID { program } .)
    INT             reduce using rule 22 (class_declaration -> CLASS ID { program } .)
    $end            reduce using rule 22 (class_declaration -> CLASS ID { program } .)
    }               reduce using rule 22 (class_declaration -> CLASS ID { program } .)


state 139

    (15) function_declaration -> FUNC ID ( empty ) . { program }
    {               shift and go to state 146


state 140

    (16) function_declaration -> FUNC ID ( function_arguments ) . { program }
    {               shift and go to state 147


state 141

    (33) if_statement -> IF ( expression ) { . program }
    (1) program -> . statement
    (2) program -> . program statement
    (3) statement -> . kword_declaration
    (4) statement -> . variable_assignment
    (5) statement -> . python_code_stmt
    (6) statement -> . conditional
    (7) statement -> . class_attribute_assignment
    (8) statement -> . function_call_stmt
    (9) statement -> . class_declaration
    (10) statement -> . function_declaration
    (17) kword_declaration -> . KWORD ID ( empty ) { program }
    (18) kword_declaration -> . KWORD ID ( function_arguments ) { program }
    (27) variable_assignment -> . ID = expression ;
    (12) python_code_stmt -> . python_code ;
    (29) conditional -> . if_statement else_statement
    (30) conditional -> . if_statement else_if_loop else_statement
    (31) conditional -> . if_statement else_if_loop
    (32) conditional -> . if_statement
    (28) class_attribute_assignment -> . class_attribute = expression ;
    (11) function_call_stmt -> . function_call ;
    (22) class_declaration -> . CLASS ID { program }
    (15) function_declaration -> . FUNC ID ( empty ) { program }
    (16) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (76) python_code -> . PYTHON_CODE
    (33) if_statement -> . IF ( expression ) { program }
    (74) class_attribute -> . expression COLON_COLON ID
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    KWORD           shift and go to state 11
    ID              shift and go to state 12
    CLASS           shift and go to state 20
    FUNC            shift and go to state 21
    PYTHON_CODE     shift and go to state 22
    IF              shift and go to state 23
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40

    expression                     shift and go to state 15
    program                        shift and go to state 148
    statement                      shift and go to state 2
    kword_declaration              shift and go to state 3
    variable_assignment            shift and go to state 4
    python_code_stmt               shift and go to state 5
    conditional                    shift and go to state 6
    class_attribute_assignment     shift and go to state 7
    function_call_stmt             shift and go to state 8
    class_declaration              shift and go to state 9
    function_declaration           shift and go to state 10
    python_code                    shift and go to state 16
    if_statement                   shift and go to state 17
    class_attribute                shift and go to state 18
    function_call                  shift and go to state 19
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31

state 142

    (17) kword_declaration -> KWORD ID ( empty ) { . program }
    (1) program -> . statement
    (2) program -> . program statement
    (3) statement -> . kword_declaration
    (4) statement -> . variable_assignment
    (5) statement -> . python_code_stmt
    (6) statement -> . conditional
    (7) statement -> . class_attribute_assignment
    (8) statement -> . function_call_stmt
    (9) statement -> . class_declaration
    (10) statement -> . function_declaration
    (17) kword_declaration -> . KWORD ID ( empty ) { program }
    (18) kword_declaration -> . KWORD ID ( function_arguments ) { program }
    (27) variable_assignment -> . ID = expression ;
    (12) python_code_stmt -> . python_code ;
    (29) conditional -> . if_statement else_statement
    (30) conditional -> . if_statement else_if_loop else_statement
    (31) conditional -> . if_statement else_if_loop
    (32) conditional -> . if_statement
    (28) class_attribute_assignment -> . class_attribute = expression ;
    (11) function_call_stmt -> . function_call ;
    (22) class_declaration -> . CLASS ID { program }
    (15) function_declaration -> . FUNC ID ( empty ) { program }
    (16) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (76) python_code -> . PYTHON_CODE
    (33) if_statement -> . IF ( expression ) { program }
    (74) class_attribute -> . expression COLON_COLON ID
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    KWORD           shift and go to state 11
    ID              shift and go to state 12
    CLASS           shift and go to state 20
    FUNC            shift and go to state 21
    PYTHON_CODE     shift and go to state 22
    IF              shift and go to state 23
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40

    program                        shift and go to state 149
    statement                      shift and go to state 2
    kword_declaration              shift and go to state 3
    variable_assignment            shift and go to state 4
    python_code_stmt               shift and go to state 5
    conditional                    shift and go to state 6
    class_attribute_assignment     shift and go to state 7
    function_call_stmt             shift and go to state 8
    class_declaration              shift and go to state 9
    function_declaration           shift and go to state 10
    expression                     shift and go to state 15
    python_code                    shift and go to state 16
    if_statement                   shift and go to state 17
    class_attribute                shift and go to state 18
    function_call                  shift and go to state 19
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31

state 143

    (18) kword_declaration -> KWORD ID ( function_arguments ) { . program }
    (1) program -> . statement
    (2) program -> . program statement
    (3) statement -> . kword_declaration
    (4) statement -> . variable_assignment
    (5) statement -> . python_code_stmt
    (6) statement -> . conditional
    (7) statement -> . class_attribute_assignment
    (8) statement -> . function_call_stmt
    (9) statement -> . class_declaration
    (10) statement -> . function_declaration
    (17) kword_declaration -> . KWORD ID ( empty ) { program }
    (18) kword_declaration -> . KWORD ID ( function_arguments ) { program }
    (27) variable_assignment -> . ID = expression ;
    (12) python_code_stmt -> . python_code ;
    (29) conditional -> . if_statement else_statement
    (30) conditional -> . if_statement else_if_loop else_statement
    (31) conditional -> . if_statement else_if_loop
    (32) conditional -> . if_statement
    (28) class_attribute_assignment -> . class_attribute = expression ;
    (11) function_call_stmt -> . function_call ;
    (22) class_declaration -> . CLASS ID { program }
    (15) function_declaration -> . FUNC ID ( empty ) { program }
    (16) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (76) python_code -> . PYTHON_CODE
    (33) if_statement -> . IF ( expression ) { program }
    (74) class_attribute -> . expression COLON_COLON ID
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    KWORD           shift and go to state 11
    ID              shift and go to state 12
    CLASS           shift and go to state 20
    FUNC            shift and go to state 21
    PYTHON_CODE     shift and go to state 22
    IF              shift and go to state 23
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40

    program                        shift and go to state 150
    statement                      shift and go to state 2
    kword_declaration              shift and go to state 3
    variable_assignment            shift and go to state 4
    python_code_stmt               shift and go to state 5
    conditional                    shift and go to state 6
    class_attribute_assignment     shift and go to state 7
    function_call_stmt             shift and go to state 8
    class_declaration              shift and go to state 9
    function_declaration           shift and go to state 10
    expression                     shift and go to state 15
    python_code                    shift and go to state 16
    if_statement                   shift and go to state 17
    class_attribute                shift and go to state 18
    function_call                  shift and go to state 19
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31

state 144

    (26) kwargs -> kwargs , id = . expression
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (74) class_attribute -> . expression COLON_COLON ID
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (76) python_code -> . PYTHON_CODE
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    ID              shift and go to state 49
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    PYTHON_CODE     shift and go to state 22

    id                             shift and go to state 27
    expression                     shift and go to state 151
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    class_attribute                shift and go to state 46
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31
    function_call                  shift and go to state 47
    python_code                    shift and go to state 48

state 145

    (36) else_if_statement -> ELSE IF ( expression ) . { program }
    {               shift and go to state 152


state 146

    (15) function_declaration -> FUNC ID ( empty ) { . program }
    (1) program -> . statement
    (2) program -> . program statement
    (3) statement -> . kword_declaration
    (4) statement -> . variable_assignment
    (5) statement -> . python_code_stmt
    (6) statement -> . conditional
    (7) statement -> . class_attribute_assignment
    (8) statement -> . function_call_stmt
    (9) statement -> . class_declaration
    (10) statement -> . function_declaration
    (17) kword_declaration -> . KWORD ID ( empty ) { program }
    (18) kword_declaration -> . KWORD ID ( function_arguments ) { program }
    (27) variable_assignment -> . ID = expression ;
    (12) python_code_stmt -> . python_code ;
    (29) conditional -> . if_statement else_statement
    (30) conditional -> . if_statement else_if_loop else_statement
    (31) conditional -> . if_statement else_if_loop
    (32) conditional -> . if_statement
    (28) class_attribute_assignment -> . class_attribute = expression ;
    (11) function_call_stmt -> . function_call ;
    (22) class_declaration -> . CLASS ID { program }
    (15) function_declaration -> . FUNC ID ( empty ) { program }
    (16) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (76) python_code -> . PYTHON_CODE
    (33) if_statement -> . IF ( expression ) { program }
    (74) class_attribute -> . expression COLON_COLON ID
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    KWORD           shift and go to state 11
    ID              shift and go to state 12
    CLASS           shift and go to state 20
    FUNC            shift and go to state 21
    PYTHON_CODE     shift and go to state 22
    IF              shift and go to state 23
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40

    program                        shift and go to state 153
    statement                      shift and go to state 2
    kword_declaration              shift and go to state 3
    variable_assignment            shift and go to state 4
    python_code_stmt               shift and go to state 5
    conditional                    shift and go to state 6
    class_attribute_assignment     shift and go to state 7
    function_call_stmt             shift and go to state 8
    class_declaration              shift and go to state 9
    function_declaration           shift and go to state 10
    expression                     shift and go to state 15
    python_code                    shift and go to state 16
    if_statement                   shift and go to state 17
    class_attribute                shift and go to state 18
    function_call                  shift and go to state 19
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31

state 147

    (16) function_declaration -> FUNC ID ( function_arguments ) { . program }
    (1) program -> . statement
    (2) program -> . program statement
    (3) statement -> . kword_declaration
    (4) statement -> . variable_assignment
    (5) statement -> . python_code_stmt
    (6) statement -> . conditional
    (7) statement -> . class_attribute_assignment
    (8) statement -> . function_call_stmt
    (9) statement -> . class_declaration
    (10) statement -> . function_declaration
    (17) kword_declaration -> . KWORD ID ( empty ) { program }
    (18) kword_declaration -> . KWORD ID ( function_arguments ) { program }
    (27) variable_assignment -> . ID = expression ;
    (12) python_code_stmt -> . python_code ;
    (29) conditional -> . if_statement else_statement
    (30) conditional -> . if_statement else_if_loop else_statement
    (31) conditional -> . if_statement else_if_loop
    (32) conditional -> . if_statement
    (28) class_attribute_assignment -> . class_attribute = expression ;
    (11) function_call_stmt -> . function_call ;
    (22) class_declaration -> . CLASS ID { program }
    (15) function_declaration -> . FUNC ID ( empty ) { program }
    (16) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (76) python_code -> . PYTHON_CODE
    (33) if_statement -> . IF ( expression ) { program }
    (74) class_attribute -> . expression COLON_COLON ID
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    KWORD           shift and go to state 11
    ID              shift and go to state 12
    CLASS           shift and go to state 20
    FUNC            shift and go to state 21
    PYTHON_CODE     shift and go to state 22
    IF              shift and go to state 23
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40

    program                        shift and go to state 154
    statement                      shift and go to state 2
    kword_declaration              shift and go to state 3
    variable_assignment            shift and go to state 4
    python_code_stmt               shift and go to state 5
    conditional                    shift and go to state 6
    class_attribute_assignment     shift and go to state 7
    function_call_stmt             shift and go to state 8
    class_declaration              shift and go to state 9
    function_declaration           shift and go to state 10
    expression                     shift and go to state 15
    python_code                    shift and go to state 16
    if_statement                   shift and go to state 17
    class_attribute                shift and go to state 18
    function_call                  shift and go to state 19
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31

state 148

    (33) if_statement -> IF ( expression ) { program . }
    (2) program -> program . statement
    (3) statement -> . kword_declaration
    (4) statement -> . variable_assignment
    (5) statement -> . python_code_stmt
    (6) statement -> . conditional
    (7) statement -> . class_attribute_assignment
    (8) statement -> . function_call_stmt
    (9) statement -> . class_declaration
    (10) statement -> . function_declaration
    (17) kword_declaration -> . KWORD ID ( empty ) { program }
    (18) kword_declaration -> . KWORD ID ( function_arguments ) { program }
    (27) variable_assignment -> . ID = expression ;
    (12) python_code_stmt -> . python_code ;
    (29) conditional -> . if_statement else_statement
    (30) conditional -> . if_statement else_if_loop else_statement
    (31) conditional -> . if_statement else_if_loop
    (32) conditional -> . if_statement
    (28) class_attribute_assignment -> . class_attribute = expression ;
    (11) function_call_stmt -> . function_call ;
    (22) class_declaration -> . CLASS ID { program }
    (15) function_declaration -> . FUNC ID ( empty ) { program }
    (16) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (76) python_code -> . PYTHON_CODE
    (33) if_statement -> . IF ( expression ) { program }
    (74) class_attribute -> . expression COLON_COLON ID
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    }               shift and go to state 155
    KWORD           shift and go to state 11
    ID              shift and go to state 12
    CLASS           shift and go to state 20
    FUNC            shift and go to state 21
    PYTHON_CODE     shift and go to state 22
    IF              shift and go to state 23
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40

    expression                     shift and go to state 15
    statement                      shift and go to state 41
    kword_declaration              shift and go to state 3
    variable_assignment            shift and go to state 4
    python_code_stmt               shift and go to state 5
    conditional                    shift and go to state 6
    class_attribute_assignment     shift and go to state 7
    function_call_stmt             shift and go to state 8
    class_declaration              shift and go to state 9
    function_declaration           shift and go to state 10
    python_code                    shift and go to state 16
    if_statement                   shift and go to state 17
    class_attribute                shift and go to state 18
    function_call                  shift and go to state 19
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31

state 149

    (17) kword_declaration -> KWORD ID ( empty ) { program . }
    (2) program -> program . statement
    (3) statement -> . kword_declaration
    (4) statement -> . variable_assignment
    (5) statement -> . python_code_stmt
    (6) statement -> . conditional
    (7) statement -> . class_attribute_assignment
    (8) statement -> . function_call_stmt
    (9) statement -> . class_declaration
    (10) statement -> . function_declaration
    (17) kword_declaration -> . KWORD ID ( empty ) { program }
    (18) kword_declaration -> . KWORD ID ( function_arguments ) { program }
    (27) variable_assignment -> . ID = expression ;
    (12) python_code_stmt -> . python_code ;
    (29) conditional -> . if_statement else_statement
    (30) conditional -> . if_statement else_if_loop else_statement
    (31) conditional -> . if_statement else_if_loop
    (32) conditional -> . if_statement
    (28) class_attribute_assignment -> . class_attribute = expression ;
    (11) function_call_stmt -> . function_call ;
    (22) class_declaration -> . CLASS ID { program }
    (15) function_declaration -> . FUNC ID ( empty ) { program }
    (16) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (76) python_code -> . PYTHON_CODE
    (33) if_statement -> . IF ( expression ) { program }
    (74) class_attribute -> . expression COLON_COLON ID
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    }               shift and go to state 156
    KWORD           shift and go to state 11
    ID              shift and go to state 12
    CLASS           shift and go to state 20
    FUNC            shift and go to state 21
    PYTHON_CODE     shift and go to state 22
    IF              shift and go to state 23
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40

    statement                      shift and go to state 41
    kword_declaration              shift and go to state 3
    variable_assignment            shift and go to state 4
    python_code_stmt               shift and go to state 5
    conditional                    shift and go to state 6
    class_attribute_assignment     shift and go to state 7
    function_call_stmt             shift and go to state 8
    class_declaration              shift and go to state 9
    function_declaration           shift and go to state 10
    expression                     shift and go to state 15
    python_code                    shift and go to state 16
    if_statement                   shift and go to state 17
    class_attribute                shift and go to state 18
    function_call                  shift and go to state 19
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31

state 150

    (18) kword_declaration -> KWORD ID ( function_arguments ) { program . }
    (2) program -> program . statement
    (3) statement -> . kword_declaration
    (4) statement -> . variable_assignment
    (5) statement -> . python_code_stmt
    (6) statement -> . conditional
    (7) statement -> . class_attribute_assignment
    (8) statement -> . function_call_stmt
    (9) statement -> . class_declaration
    (10) statement -> . function_declaration
    (17) kword_declaration -> . KWORD ID ( empty ) { program }
    (18) kword_declaration -> . KWORD ID ( function_arguments ) { program }
    (27) variable_assignment -> . ID = expression ;
    (12) python_code_stmt -> . python_code ;
    (29) conditional -> . if_statement else_statement
    (30) conditional -> . if_statement else_if_loop else_statement
    (31) conditional -> . if_statement else_if_loop
    (32) conditional -> . if_statement
    (28) class_attribute_assignment -> . class_attribute = expression ;
    (11) function_call_stmt -> . function_call ;
    (22) class_declaration -> . CLASS ID { program }
    (15) function_declaration -> . FUNC ID ( empty ) { program }
    (16) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (76) python_code -> . PYTHON_CODE
    (33) if_statement -> . IF ( expression ) { program }
    (74) class_attribute -> . expression COLON_COLON ID
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    }               shift and go to state 157
    KWORD           shift and go to state 11
    ID              shift and go to state 12
    CLASS           shift and go to state 20
    FUNC            shift and go to state 21
    PYTHON_CODE     shift and go to state 22
    IF              shift and go to state 23
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40

    statement                      shift and go to state 41
    kword_declaration              shift and go to state 3
    variable_assignment            shift and go to state 4
    python_code_stmt               shift and go to state 5
    conditional                    shift and go to state 6
    class_attribute_assignment     shift and go to state 7
    function_call_stmt             shift and go to state 8
    class_declaration              shift and go to state 9
    function_declaration           shift and go to state 10
    expression                     shift and go to state 15
    python_code                    shift and go to state 16
    if_statement                   shift and go to state 17
    class_attribute                shift and go to state 18
    function_call                  shift and go to state 19
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31

state 151

    (26) kwargs -> kwargs , id = expression .
    (50) expression -> expression . > expression
    (51) expression -> expression . < expression
    (53) expression -> expression . & expression
    (54) expression -> expression . | expression
    (55) expression -> expression . EQ_GREATER expression
    (56) expression -> expression . EQ_LESS expression
    (57) expression -> expression . NOT_EQEQ expression
    (58) expression -> expression . EQEQ expression
    (59) expression -> expression . % expression
    (60) expression -> expression . * expression
    (61) expression -> expression . / expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (74) class_attribute -> expression . COLON_COLON ID
    (13) function_call -> expression . ( empty )
    (14) function_call -> expression . ( function_arguments )
    ,               reduce using rule 26 (kwargs -> kwargs , id = expression .)
    )               reduce using rule 26 (kwargs -> kwargs , id = expression .)
    >               shift and go to state 54
    <               shift and go to state 55
    &               shift and go to state 56
    |               shift and go to state 57
    EQ_GREATER      shift and go to state 58
    EQ_LESS         shift and go to state 59
    NOT_EQEQ        shift and go to state 60
    EQEQ            shift and go to state 61
    %               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    -               shift and go to state 65
    +               shift and go to state 66
    COLON_COLON     shift and go to state 52
    (               shift and go to state 53


state 152

    (36) else_if_statement -> ELSE IF ( expression ) { . program }
    (1) program -> . statement
    (2) program -> . program statement
    (3) statement -> . kword_declaration
    (4) statement -> . variable_assignment
    (5) statement -> . python_code_stmt
    (6) statement -> . conditional
    (7) statement -> . class_attribute_assignment
    (8) statement -> . function_call_stmt
    (9) statement -> . class_declaration
    (10) statement -> . function_declaration
    (17) kword_declaration -> . KWORD ID ( empty ) { program }
    (18) kword_declaration -> . KWORD ID ( function_arguments ) { program }
    (27) variable_assignment -> . ID = expression ;
    (12) python_code_stmt -> . python_code ;
    (29) conditional -> . if_statement else_statement
    (30) conditional -> . if_statement else_if_loop else_statement
    (31) conditional -> . if_statement else_if_loop
    (32) conditional -> . if_statement
    (28) class_attribute_assignment -> . class_attribute = expression ;
    (11) function_call_stmt -> . function_call ;
    (22) class_declaration -> . CLASS ID { program }
    (15) function_declaration -> . FUNC ID ( empty ) { program }
    (16) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (76) python_code -> . PYTHON_CODE
    (33) if_statement -> . IF ( expression ) { program }
    (74) class_attribute -> . expression COLON_COLON ID
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    KWORD           shift and go to state 11
    ID              shift and go to state 12
    CLASS           shift and go to state 20
    FUNC            shift and go to state 21
    PYTHON_CODE     shift and go to state 22
    IF              shift and go to state 23
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40

    expression                     shift and go to state 15
    program                        shift and go to state 158
    statement                      shift and go to state 2
    kword_declaration              shift and go to state 3
    variable_assignment            shift and go to state 4
    python_code_stmt               shift and go to state 5
    conditional                    shift and go to state 6
    class_attribute_assignment     shift and go to state 7
    function_call_stmt             shift and go to state 8
    class_declaration              shift and go to state 9
    function_declaration           shift and go to state 10
    python_code                    shift and go to state 16
    if_statement                   shift and go to state 17
    class_attribute                shift and go to state 18
    function_call                  shift and go to state 19
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31

state 153

    (15) function_declaration -> FUNC ID ( empty ) { program . }
    (2) program -> program . statement
    (3) statement -> . kword_declaration
    (4) statement -> . variable_assignment
    (5) statement -> . python_code_stmt
    (6) statement -> . conditional
    (7) statement -> . class_attribute_assignment
    (8) statement -> . function_call_stmt
    (9) statement -> . class_declaration
    (10) statement -> . function_declaration
    (17) kword_declaration -> . KWORD ID ( empty ) { program }
    (18) kword_declaration -> . KWORD ID ( function_arguments ) { program }
    (27) variable_assignment -> . ID = expression ;
    (12) python_code_stmt -> . python_code ;
    (29) conditional -> . if_statement else_statement
    (30) conditional -> . if_statement else_if_loop else_statement
    (31) conditional -> . if_statement else_if_loop
    (32) conditional -> . if_statement
    (28) class_attribute_assignment -> . class_attribute = expression ;
    (11) function_call_stmt -> . function_call ;
    (22) class_declaration -> . CLASS ID { program }
    (15) function_declaration -> . FUNC ID ( empty ) { program }
    (16) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (76) python_code -> . PYTHON_CODE
    (33) if_statement -> . IF ( expression ) { program }
    (74) class_attribute -> . expression COLON_COLON ID
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    }               shift and go to state 159
    KWORD           shift and go to state 11
    ID              shift and go to state 12
    CLASS           shift and go to state 20
    FUNC            shift and go to state 21
    PYTHON_CODE     shift and go to state 22
    IF              shift and go to state 23
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40

    statement                      shift and go to state 41
    kword_declaration              shift and go to state 3
    variable_assignment            shift and go to state 4
    python_code_stmt               shift and go to state 5
    conditional                    shift and go to state 6
    class_attribute_assignment     shift and go to state 7
    function_call_stmt             shift and go to state 8
    class_declaration              shift and go to state 9
    function_declaration           shift and go to state 10
    expression                     shift and go to state 15
    python_code                    shift and go to state 16
    if_statement                   shift and go to state 17
    class_attribute                shift and go to state 18
    function_call                  shift and go to state 19
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31

state 154

    (16) function_declaration -> FUNC ID ( function_arguments ) { program . }
    (2) program -> program . statement
    (3) statement -> . kword_declaration
    (4) statement -> . variable_assignment
    (5) statement -> . python_code_stmt
    (6) statement -> . conditional
    (7) statement -> . class_attribute_assignment
    (8) statement -> . function_call_stmt
    (9) statement -> . class_declaration
    (10) statement -> . function_declaration
    (17) kword_declaration -> . KWORD ID ( empty ) { program }
    (18) kword_declaration -> . KWORD ID ( function_arguments ) { program }
    (27) variable_assignment -> . ID = expression ;
    (12) python_code_stmt -> . python_code ;
    (29) conditional -> . if_statement else_statement
    (30) conditional -> . if_statement else_if_loop else_statement
    (31) conditional -> . if_statement else_if_loop
    (32) conditional -> . if_statement
    (28) class_attribute_assignment -> . class_attribute = expression ;
    (11) function_call_stmt -> . function_call ;
    (22) class_declaration -> . CLASS ID { program }
    (15) function_declaration -> . FUNC ID ( empty ) { program }
    (16) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (76) python_code -> . PYTHON_CODE
    (33) if_statement -> . IF ( expression ) { program }
    (74) class_attribute -> . expression COLON_COLON ID
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    }               shift and go to state 160
    KWORD           shift and go to state 11
    ID              shift and go to state 12
    CLASS           shift and go to state 20
    FUNC            shift and go to state 21
    PYTHON_CODE     shift and go to state 22
    IF              shift and go to state 23
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40

    statement                      shift and go to state 41
    kword_declaration              shift and go to state 3
    variable_assignment            shift and go to state 4
    python_code_stmt               shift and go to state 5
    conditional                    shift and go to state 6
    class_attribute_assignment     shift and go to state 7
    function_call_stmt             shift and go to state 8
    class_declaration              shift and go to state 9
    function_declaration           shift and go to state 10
    expression                     shift and go to state 15
    python_code                    shift and go to state 16
    if_statement                   shift and go to state 17
    class_attribute                shift and go to state 18
    function_call                  shift and go to state 19
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31

state 155

    (33) if_statement -> IF ( expression ) { program } .
    ELSE            reduce using rule 33 (if_statement -> IF ( expression ) { program } .)
    KWORD           reduce using rule 33 (if_statement -> IF ( expression ) { program } .)
    ID              reduce using rule 33 (if_statement -> IF ( expression ) { program } .)
    CLASS           reduce using rule 33 (if_statement -> IF ( expression ) { program } .)
    FUNC            reduce using rule 33 (if_statement -> IF ( expression ) { program } .)
    PYTHON_CODE     reduce using rule 33 (if_statement -> IF ( expression ) { program } .)
    IF              reduce using rule 33 (if_statement -> IF ( expression ) { program } .)
    (               reduce using rule 33 (if_statement -> IF ( expression ) { program } .)
    !               reduce using rule 33 (if_statement -> IF ( expression ) { program } .)
    +               reduce using rule 33 (if_statement -> IF ( expression ) { program } .)
    -               reduce using rule 33 (if_statement -> IF ( expression ) { program } .)
    [               reduce using rule 33 (if_statement -> IF ( expression ) { program } .)
    {               reduce using rule 33 (if_statement -> IF ( expression ) { program } .)
    STRING          reduce using rule 33 (if_statement -> IF ( expression ) { program } .)
    FALSE           reduce using rule 33 (if_statement -> IF ( expression ) { program } .)
    TRUE            reduce using rule 33 (if_statement -> IF ( expression ) { program } .)
    FLOAT           reduce using rule 33 (if_statement -> IF ( expression ) { program } .)
    INT             reduce using rule 33 (if_statement -> IF ( expression ) { program } .)
    $end            reduce using rule 33 (if_statement -> IF ( expression ) { program } .)
    }               reduce using rule 33 (if_statement -> IF ( expression ) { program } .)


state 156

    (17) kword_declaration -> KWORD ID ( empty ) { program } .
    KWORD           reduce using rule 17 (kword_declaration -> KWORD ID ( empty ) { program } .)
    ID              reduce using rule 17 (kword_declaration -> KWORD ID ( empty ) { program } .)
    CLASS           reduce using rule 17 (kword_declaration -> KWORD ID ( empty ) { program } .)
    FUNC            reduce using rule 17 (kword_declaration -> KWORD ID ( empty ) { program } .)
    PYTHON_CODE     reduce using rule 17 (kword_declaration -> KWORD ID ( empty ) { program } .)
    IF              reduce using rule 17 (kword_declaration -> KWORD ID ( empty ) { program } .)
    (               reduce using rule 17 (kword_declaration -> KWORD ID ( empty ) { program } .)
    !               reduce using rule 17 (kword_declaration -> KWORD ID ( empty ) { program } .)
    +               reduce using rule 17 (kword_declaration -> KWORD ID ( empty ) { program } .)
    -               reduce using rule 17 (kword_declaration -> KWORD ID ( empty ) { program } .)
    [               reduce using rule 17 (kword_declaration -> KWORD ID ( empty ) { program } .)
    {               reduce using rule 17 (kword_declaration -> KWORD ID ( empty ) { program } .)
    STRING          reduce using rule 17 (kword_declaration -> KWORD ID ( empty ) { program } .)
    FALSE           reduce using rule 17 (kword_declaration -> KWORD ID ( empty ) { program } .)
    TRUE            reduce using rule 17 (kword_declaration -> KWORD ID ( empty ) { program } .)
    FLOAT           reduce using rule 17 (kword_declaration -> KWORD ID ( empty ) { program } .)
    INT             reduce using rule 17 (kword_declaration -> KWORD ID ( empty ) { program } .)
    $end            reduce using rule 17 (kword_declaration -> KWORD ID ( empty ) { program } .)
    }               reduce using rule 17 (kword_declaration -> KWORD ID ( empty ) { program } .)


state 157

    (18) kword_declaration -> KWORD ID ( function_arguments ) { program } .
    KWORD           reduce using rule 18 (kword_declaration -> KWORD ID ( function_arguments ) { program } .)
    ID              reduce using rule 18 (kword_declaration -> KWORD ID ( function_arguments ) { program } .)
    CLASS           reduce using rule 18 (kword_declaration -> KWORD ID ( function_arguments ) { program } .)
    FUNC            reduce using rule 18 (kword_declaration -> KWORD ID ( function_arguments ) { program } .)
    PYTHON_CODE     reduce using rule 18 (kword_declaration -> KWORD ID ( function_arguments ) { program } .)
    IF              reduce using rule 18 (kword_declaration -> KWORD ID ( function_arguments ) { program } .)
    (               reduce using rule 18 (kword_declaration -> KWORD ID ( function_arguments ) { program } .)
    !               reduce using rule 18 (kword_declaration -> KWORD ID ( function_arguments ) { program } .)
    +               reduce using rule 18 (kword_declaration -> KWORD ID ( function_arguments ) { program } .)
    -               reduce using rule 18 (kword_declaration -> KWORD ID ( function_arguments ) { program } .)
    [               reduce using rule 18 (kword_declaration -> KWORD ID ( function_arguments ) { program } .)
    {               reduce using rule 18 (kword_declaration -> KWORD ID ( function_arguments ) { program } .)
    STRING          reduce using rule 18 (kword_declaration -> KWORD ID ( function_arguments ) { program } .)
    FALSE           reduce using rule 18 (kword_declaration -> KWORD ID ( function_arguments ) { program } .)
    TRUE            reduce using rule 18 (kword_declaration -> KWORD ID ( function_arguments ) { program } .)
    FLOAT           reduce using rule 18 (kword_declaration -> KWORD ID ( function_arguments ) { program } .)
    INT             reduce using rule 18 (kword_declaration -> KWORD ID ( function_arguments ) { program } .)
    $end            reduce using rule 18 (kword_declaration -> KWORD ID ( function_arguments ) { program } .)
    }               reduce using rule 18 (kword_declaration -> KWORD ID ( function_arguments ) { program } .)


state 158

    (36) else_if_statement -> ELSE IF ( expression ) { program . }
    (2) program -> program . statement
    (3) statement -> . kword_declaration
    (4) statement -> . variable_assignment
    (5) statement -> . python_code_stmt
    (6) statement -> . conditional
    (7) statement -> . class_attribute_assignment
    (8) statement -> . function_call_stmt
    (9) statement -> . class_declaration
    (10) statement -> . function_declaration
    (17) kword_declaration -> . KWORD ID ( empty ) { program }
    (18) kword_declaration -> . KWORD ID ( function_arguments ) { program }
    (27) variable_assignment -> . ID = expression ;
    (12) python_code_stmt -> . python_code ;
    (29) conditional -> . if_statement else_statement
    (30) conditional -> . if_statement else_if_loop else_statement
    (31) conditional -> . if_statement else_if_loop
    (32) conditional -> . if_statement
    (28) class_attribute_assignment -> . class_attribute = expression ;
    (11) function_call_stmt -> . function_call ;
    (22) class_declaration -> . CLASS ID { program }
    (15) function_declaration -> . FUNC ID ( empty ) { program }
    (16) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (76) python_code -> . PYTHON_CODE
    (33) if_statement -> . IF ( expression ) { program }
    (74) class_attribute -> . expression COLON_COLON ID
    (13) function_call -> . expression ( empty )
    (14) function_call -> . expression ( function_arguments )
    (38) expression -> . _numpy
    (39) expression -> . _list
    (40) expression -> . _tuple
    (41) expression -> . class_attribute
    (42) expression -> . id
    (43) expression -> . string
    (44) expression -> . bool
    (45) expression -> . float
    (46) expression -> . int
    (47) expression -> . function_call
    (48) expression -> . python_code
    (49) expression -> . ( expression )
    (50) expression -> . expression > expression
    (51) expression -> . expression < expression
    (52) expression -> . ! expression
    (53) expression -> . expression & expression
    (54) expression -> . expression | expression
    (55) expression -> . expression EQ_GREATER expression
    (56) expression -> . expression EQ_LESS expression
    (57) expression -> . expression NOT_EQEQ expression
    (58) expression -> . expression EQEQ expression
    (59) expression -> . expression % expression
    (60) expression -> . expression * expression
    (61) expression -> . expression / expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (64) expression -> . + expression
    (65) expression -> . - expression
    (68) _numpy -> . ( positional_args )
    (67) _list -> . [ positional_args ]
    (66) _tuple -> . { positional_args }
    (75) id -> . ID
    (70) string -> . STRING
    (72) bool -> . FALSE
    (73) bool -> . TRUE
    (71) float -> . FLOAT
    (69) int -> . INT
    }               shift and go to state 161
    KWORD           shift and go to state 11
    ID              shift and go to state 12
    CLASS           shift and go to state 20
    FUNC            shift and go to state 21
    PYTHON_CODE     shift and go to state 22
    IF              shift and go to state 23
    (               shift and go to state 13
    !               shift and go to state 32
    +               shift and go to state 34
    -               shift and go to state 33
    [               shift and go to state 35
    {               shift and go to state 14
    STRING          shift and go to state 36
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40

    expression                     shift and go to state 15
    statement                      shift and go to state 41
    kword_declaration              shift and go to state 3
    variable_assignment            shift and go to state 4
    python_code_stmt               shift and go to state 5
    conditional                    shift and go to state 6
    class_attribute_assignment     shift and go to state 7
    function_call_stmt             shift and go to state 8
    class_declaration              shift and go to state 9
    function_declaration           shift and go to state 10
    python_code                    shift and go to state 16
    if_statement                   shift and go to state 17
    class_attribute                shift and go to state 18
    function_call                  shift and go to state 19
    _numpy                         shift and go to state 24
    _list                          shift and go to state 25
    _tuple                         shift and go to state 26
    id                             shift and go to state 27
    string                         shift and go to state 28
    bool                           shift and go to state 29
    float                          shift and go to state 30
    int                            shift and go to state 31

state 159

    (15) function_declaration -> FUNC ID ( empty ) { program } .
    KWORD           reduce using rule 15 (function_declaration -> FUNC ID ( empty ) { program } .)
    ID              reduce using rule 15 (function_declaration -> FUNC ID ( empty ) { program } .)
    CLASS           reduce using rule 15 (function_declaration -> FUNC ID ( empty ) { program } .)
    FUNC            reduce using rule 15 (function_declaration -> FUNC ID ( empty ) { program } .)
    PYTHON_CODE     reduce using rule 15 (function_declaration -> FUNC ID ( empty ) { program } .)
    IF              reduce using rule 15 (function_declaration -> FUNC ID ( empty ) { program } .)
    (               reduce using rule 15 (function_declaration -> FUNC ID ( empty ) { program } .)
    !               reduce using rule 15 (function_declaration -> FUNC ID ( empty ) { program } .)
    +               reduce using rule 15 (function_declaration -> FUNC ID ( empty ) { program } .)
    -               reduce using rule 15 (function_declaration -> FUNC ID ( empty ) { program } .)
    [               reduce using rule 15 (function_declaration -> FUNC ID ( empty ) { program } .)
    {               reduce using rule 15 (function_declaration -> FUNC ID ( empty ) { program } .)
    STRING          reduce using rule 15 (function_declaration -> FUNC ID ( empty ) { program } .)
    FALSE           reduce using rule 15 (function_declaration -> FUNC ID ( empty ) { program } .)
    TRUE            reduce using rule 15 (function_declaration -> FUNC ID ( empty ) { program } .)
    FLOAT           reduce using rule 15 (function_declaration -> FUNC ID ( empty ) { program } .)
    INT             reduce using rule 15 (function_declaration -> FUNC ID ( empty ) { program } .)
    $end            reduce using rule 15 (function_declaration -> FUNC ID ( empty ) { program } .)
    }               reduce using rule 15 (function_declaration -> FUNC ID ( empty ) { program } .)


state 160

    (16) function_declaration -> FUNC ID ( function_arguments ) { program } .
    KWORD           reduce using rule 16 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    ID              reduce using rule 16 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    CLASS           reduce using rule 16 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    FUNC            reduce using rule 16 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    PYTHON_CODE     reduce using rule 16 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    IF              reduce using rule 16 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    (               reduce using rule 16 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    !               reduce using rule 16 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    +               reduce using rule 16 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    -               reduce using rule 16 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    [               reduce using rule 16 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    {               reduce using rule 16 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    STRING          reduce using rule 16 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    FALSE           reduce using rule 16 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    TRUE            reduce using rule 16 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    FLOAT           reduce using rule 16 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    INT             reduce using rule 16 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    $end            reduce using rule 16 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    }               reduce using rule 16 (function_declaration -> FUNC ID ( function_arguments ) { program } .)


state 161

    (36) else_if_statement -> ELSE IF ( expression ) { program } .
    ELSE            reduce using rule 36 (else_if_statement -> ELSE IF ( expression ) { program } .)
    KWORD           reduce using rule 36 (else_if_statement -> ELSE IF ( expression ) { program } .)
    ID              reduce using rule 36 (else_if_statement -> ELSE IF ( expression ) { program } .)
    CLASS           reduce using rule 36 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FUNC            reduce using rule 36 (else_if_statement -> ELSE IF ( expression ) { program } .)
    PYTHON_CODE     reduce using rule 36 (else_if_statement -> ELSE IF ( expression ) { program } .)
    IF              reduce using rule 36 (else_if_statement -> ELSE IF ( expression ) { program } .)
    (               reduce using rule 36 (else_if_statement -> ELSE IF ( expression ) { program } .)
    !               reduce using rule 36 (else_if_statement -> ELSE IF ( expression ) { program } .)
    +               reduce using rule 36 (else_if_statement -> ELSE IF ( expression ) { program } .)
    -               reduce using rule 36 (else_if_statement -> ELSE IF ( expression ) { program } .)
    [               reduce using rule 36 (else_if_statement -> ELSE IF ( expression ) { program } .)
    {               reduce using rule 36 (else_if_statement -> ELSE IF ( expression ) { program } .)
    STRING          reduce using rule 36 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FALSE           reduce using rule 36 (else_if_statement -> ELSE IF ( expression ) { program } .)
    TRUE            reduce using rule 36 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FLOAT           reduce using rule 36 (else_if_statement -> ELSE IF ( expression ) { program } .)
    INT             reduce using rule 36 (else_if_statement -> ELSE IF ( expression ) { program } .)
    $end            reduce using rule 36 (else_if_statement -> ELSE IF ( expression ) { program } .)
    }               reduce using rule 36 (else_if_statement -> ELSE IF ( expression ) { program } .)


Conflicts:

shift/reduce conflict for ) in state 44 resolved as shift